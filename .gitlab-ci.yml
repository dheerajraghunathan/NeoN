# SPDX-FileCopyrightText: 2023 - 2025 NeoN authors
#
# SPDX-License-Identifier: Unlicense

image: greole/neon-cuda

workflow:
  rules:
    # Run only when triggered via API
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
    # Skip in all other cases
    - when: never

stages:
  - build-and-test
  - trigger
  - benchmark

build-and-test-project:
  stage: build-and-test
  tags: ["nvidia-h100-gpus"]
  before_script:
    # Install pre-commit
    - pip3 install --user --break-system-packages pre-commit
    - export PATH="$HOME/.local/bin:$PATH"

    # Optional: show versions of tools
    - cmake --version
    - clang++ --version || g++ --version
    - nvidia-smi
    - nvcc --version

  script:
    - cmake --preset develop -DCMAKE_CUDA_ARCHITECTURES=90 -DNeoN_WITH_THREADS=OFF
    - cmake --build --preset develop
    - ctest --preset develop --output-on-failure

trigger-foamadapter:
  stage: trigger
  tags: ["nvidia-h100-gpus"]
  needs: ["build-and-test-project"]
  script:
    - curl --fail --request POST --form token=$FOAMADAPTER_TRIGGER_TOKEN --form ref=main --form variables[NEON_BRANCH]=$CI_COMMIT_REF_NAME --form variables[NEON_COMMIT]=$CI_COMMIT_SHA "${CI_API_V4_URL}/projects/1095/trigger/pipeline"
  rules:
    - when: on_success

benchmark-on-tum-coma:
  stage: benchmark
  tags: ["nvidia-h100-gpus"]
  needs: ["trigger-foamadapter"]
  variables:
    RESULTS_DIR: "benchmark-results"
    RUN_IDENTIFIER: "${CI_PIPELINE_ID}"
    REPO_NAME: "NeoFOAM-BenchmarkData"
    TARGET_REPO: "github.com/exasim-project/${REPO_NAME}.git"
    TARGET_BRANCH: "ci-benchmarks"
  script:
    # Install dependencies
    - pip3 install --user --break-system-packages xmltodict

    # Collect system info (CPU, GPU, compilers)
    - mkdir ${RESULTS_DIR}
    - |
      {
        echo "===== CPU INFO ====="
        lscpu
        echo ""
        echo "===== GPU INFO ====="
        nvidia-smi --query-gpu=gpu_name,memory.total,driver_version --format=csv || echo "No GPU found"
        echo ""
        echo "===== COMPILER INFO ====="
        echo "CMake:"
        cmake --version
        echo ""
        echo "C++ compiler:"
        clang++ --version || g++ --version || echo "No C++ compiler found"
        echo ""
        echo "CUDA compiler:"
        nvcc --version || echo "nvcc not available"
      } > ${RESULTS_DIR}/system-info.log

    # Build & benchmark current branch
    - echo ">>> Build current branch"
    - cmake --preset profiling -DCMAKE_CUDA_ARCHITECTURES=90 -DNeoN_WITH_THREADS=OFF
    - cmake --build --preset profiling
    - echo ">>> Running benchmarks...(current branch)"
    - ctest --preset profiling
    - cd build/profiling/bin/benchmarks
    - python3 ../../../../scripts/catch2json.py
    - cd ../../../..
    - cp build/profiling/bin/benchmarks/*.json ${RESULTS_DIR}/

    - rm -rf build

    # Build & benchmark main branch
    - echo ">>> Build main branch"
    - git fetch origin main
    - git checkout main
    - cmake --preset profiling -DCMAKE_CUDA_ARCHITECTURES=90 -DNeoN_WITH_THREADS=OFF
    - cmake --build --preset profiling
    - echo ">>> Running benchmarks...(main branch)"
    - ctest --preset profiling
    - cd build/profiling/bin/benchmarks
    - python3 ../../../../scripts/catch2json.py
    - cd ../../../..
    - mkdir -p ${RESULTS_DIR}/main
    - cp build/profiling/bin/benchmarks/*.json ${RESULTS_DIR}/main/

    # Push benchmark results to GitHub
    - git config --global user.email "gitlab-ci@users.noreply.github.com"
    - git config --global user.name "GitLab CI"
    - git clone https://oauth2:${API_TOKEN_GITHUB}@${TARGET_REPO}
    - cd ${REPO_NAME}
    - git checkout "${TARGET_BRANCH}" || git checkout -b "${TARGET_BRANCH}"
    - mkdir -p "${RUN_IDENTIFIER}/${CI_RUNNER_DESCRIPTION}"
    - cp -r ../${RESULTS_DIR}/* "${RUN_IDENTIFIER}/${CI_RUNNER_DESCRIPTION}"
    - git add .
    - git commit -m "Benchmarks from GitLab pipeline ${RUN_IDENTIFIER}" || echo "No changes to commit"
    - git pull --rebase || true
    - git push origin "${TARGET_BRANCH}"

  rules:
    # Run automatically if commit message contains 'run-benchmark'
    - if: '$CI_COMMIT_MESSAGE =~ /\[run-benchmark\]/i'
      when: on_success
    # Otherwise don't create the job at all
    - when: never
