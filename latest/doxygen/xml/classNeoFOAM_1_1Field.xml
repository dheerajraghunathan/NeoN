<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::Field</compoundname>
    <includes refid="field_8hpp" local="no">field.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classNeoFOAM_1_1Field_1af68426fb42f64290f1e7c32215cf2212" prot="public" static="no">
        <type>ValueType</type>
        <definition>using NeoFOAM::Field&lt; ValueType &gt;::FieldValueType =  ValueType</definition>
        <argsstring></argsstring>
        <name>FieldValueType</name>
        <qualifiedname>NeoFOAM::Field::FieldValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="53" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1a4448dad85c0348167844faaf076c01fe" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
        <definition>size_t NeoFOAM::Field&lt; ValueType &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>NeoFOAM::Field::size_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Size of the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="419" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1ad8da4b64627522d2cf5078f1701af863" prot="private" static="no" mutable="no">
        <type>ValueType *</type>
        <definition>ValueType* NeoFOAM::Field&lt; ValueType &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>NeoFOAM::Field::data_</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to the field data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="420" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1ac51548bd9bf092b14f8164d2bc742fd5" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
        <definition>const Executor NeoFOAM::Field&lt; ValueType &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <qualifiedname>NeoFOAM::Field::exec_</qualifiedname>
        <briefdescription>
<para>Executor associated with the field. (CPU, GPU, openMP, etc.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="421" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="421" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a6900cfd42fa127eda30b27dd0cebd9a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create an uninitialized <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="60" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="60" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a4320bbd12b6f44bee464a5f3aeef646c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const ValueType *in, size_t size, Executor hostExec=SerialExecutor())</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
          <declname>hostExec</declname>
          <defval><ref refid="classNeoFOAM_1_1SerialExecutor" kindref="compound">SerialExecutor</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size from existing memory on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to existing data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostExec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor where the original data is located </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="78" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="78" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac25179c81371894f06f4c974fcdf081b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size, ValueType value)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor and uniform value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="99" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac615ca8777f8e5ce7d5d9cb64cc58441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, std::vector&lt; ValueType &gt; in)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> from a given vector of values on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="115" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1abe03d8f86919e510953bcaeee32ce6ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const Field&lt; ValueType &gt; &amp;in)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> as a copy of a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> on a specified executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="122" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab17560942b395479c075549c15188709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor, creates a new field with the same size and data as the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="130" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae32956ac0b1a76fd4313e7f5d17e061d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>Field</name>
        <qualifiedname>NeoFOAM::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves the data from the parsed field to the new field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to move from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="136" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a7cad3648ef3dbb9efd4429fd9ddc4860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::~Field</definition>
        <argsstring>()</argsstring>
        <name>~Field</name>
        <qualifiedname>NeoFOAM::Field::~Field</qualifiedname>
        <briefdescription>
<para>Destroy the <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="145" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab3d5f8f8a4a7b07d5873f767978c0be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::apply</definition>
        <argsstring>(func f)</argsstring>
        <name>apply</name>
        <qualifiedname>NeoFOAM::Field::apply</qualifiedname>
        <param>
          <type>func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>applies a functor, transformation, to the field </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to map over the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Ideally the f should be a KOKKOS_LAMBA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="157" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae4fd24bda6f5d58b89d2c6e633e87359" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::copyToExecutor</definition>
        <argsstring>(Executor dstExec) const</argsstring>
        <name>copyToExecutor</name>
        <qualifiedname>NeoFOAM::Field::copyToExecutor</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
          <declname>dstExec</declname>
        </param>
        <briefdescription>
<para>Copies the data to a new field on a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstExec</parametername>
</parameternamelist>
<parameterdescription>
<para>The executor on which the data should be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="167" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a3c6cef7853ecc075f375c2ecbf2f9d86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>() const</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoFOAM::Field::copyToHost</qualifiedname>
        <briefdescription>
<para>Returns a copy of the field back to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="181" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a4e66ce8a5aca4acb78041a8b94ff9734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;result)</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoFOAM::Field::copyToHost</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies the data (from anywhere) to a parsed host field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The field into which the data must be copied. Must be sized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>exits if the size of the result field is not the same as the source field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="191" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="191" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1af3de837138aaea3b0aa6fd50d24e0200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType &amp; NeoFOAM::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i)=delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoFOAM::Field::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="200" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a414e51331612e4b84aa3040fbd9172ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ValueType &amp;</type>
        <definition>const ValueType &amp; NeoFOAM::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i) const =delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoFOAM::Field::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="203" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a274696665d8efadef9091750fe3950db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const ValueType &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoFOAM::Field::operator=</qualifiedname>
        <param>
          <type>const ValueType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the passed value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="209" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a8bd676379e963159ca6fdd3c5ce55f9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoFOAM::Field::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This field will be sized to the size of the parsed field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="217" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="217" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1abf3510745e3c8e874c92f74a6b8800a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoFOAM::Field&lt; ValueType &gt;::operator+=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>NeoFOAM::Field::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="232" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a043a0b776ba57671edba01e5533f092a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoFOAM::Field&lt; ValueType &gt;::operator-=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>NeoFOAM::Field::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="244" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1abcfb8d60bc581722fe51fac0af7c1a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoFOAM::Field::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiply by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiply. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="256" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="256" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a14d497baa1b35c3503d6cc4d40b6560c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoFOAM::Field::operator*</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies every cell in the field by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="271" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1abbd660af736c5b000d4ad9107179810e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoFOAM::Field&lt; ValueType &gt;::operator*=</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>NeoFOAM::Field::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies this field by another field element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to multiply with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the element-wise multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="284" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="284" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae72905dbd7242d18ea54360094359879" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoFOAM::Field&lt; ValueType &gt;::operator*=</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>NeoFOAM::Field::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply-assignment operator, multiplies every cell in the field by a scalar and updates the field in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="297" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1c9e4d097ea90596f696bbc491587391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::resize</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>resize</name>
        <qualifiedname>NeoFOAM::Field::resize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resizes the field to a new size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="308" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="308" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a756b2b776a6c4cc7ffe091e42e505efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType *</type>
        <definition>ValueType * NeoFOAM::Field&lt; ValueType &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <qualifiedname>NeoFOAM::Field::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="334" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a787ac6e0c134314a02d6ab9eb8b45d92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ValueType *</type>
        <definition>const ValueType * NeoFOAM::Field&lt; ValueType &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>NeoFOAM::Field::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="340" column="22" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a3669f86690a09efc721a5eb902f7aa28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor &amp; NeoFOAM::Field&lt; ValueType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <qualifiedname>NeoFOAM::Field::exec</qualifiedname>
        <briefdescription>
<para>Gets the executor associated with the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="346" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
        <definition>size_t NeoFOAM::Field&lt; ValueType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoFOAM::Field::size</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="352" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a054ea5a37590a3da1faf3396ec450185" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoFOAM_1a7c2c6a7a7bda94e9fb289fd81b96f745" kindref="member">label</ref></type>
        <definition>label NeoFOAM::Field&lt; ValueType &gt;::ssize</definition>
        <argsstring>() const</argsstring>
        <name>ssize</name>
        <qualifiedname>NeoFOAM::Field::ssize</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="358" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1009e73d13b7ba45b4faaf25bb5802de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::Field&lt; ValueType &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>NeoFOAM::Field::empty</qualifiedname>
        <briefdescription>
<para>Checks if the field is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the field is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="364" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aba166a5c31c2c70c01f05a01c18970d0" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="367" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aeffd125a613514fa7244fe4ff81e9026" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="370" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a2d0d82f98e779c90b4beb695c8b974a9" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="376" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1acf22c0bbcf35668b20b954e7e90b2fe0" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="382" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a740e49fef236461af10ec01cf9657641" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="388" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a526066d5fecaaa45f4c60f177cf0c749" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="391" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1acda19a3113f96a8cd44b6f4b00f355a4" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="397" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a94cfb70d69575028b3209439857f0df2" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoFOAM::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoFOAM::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoFOAM_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="406" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1df824a46de3a2c0db14c4457ab8a34e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; NeoFOAM::Field&lt; ValueType &gt;::range</definition>
        <argsstring>() const</argsstring>
        <name>range</name>
        <qualifiedname>NeoFOAM::Field::range</qualifiedname>
        <briefdescription>
<para>Gets the range of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The range of the field {0, <ref refid="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" kindref="member">size()</ref>}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="415" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="415" bodyend="415"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1af6865c7c3fc68b0f5c6ccd829ea17bc7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::validateOtherField</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs) const</argsstring>
        <name>validateOtherField</name>
        <qualifiedname>NeoFOAM::Field::validateOtherField</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two fields are the same size and have the same executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="427" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="427" bodyend="431"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to contain the data and executors for a field and define some basic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="42" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="49" bodyend="432"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1Field_1ab3d5f8f8a4a7b07d5873f767978c0be7" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>apply</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae4fd24bda6f5d58b89d2c6e633e87359" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToExecutor</name></member>
      <member refid="classNeoFOAM_1_1Field_1a3c6cef7853ecc075f375c2ecbf2f9d86" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1a4e66ce8a5aca4acb78041a8b94ff9734" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1a756b2b776a6c4cc7ffe091e42e505efa" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1a787ac6e0c134314a02d6ab9eb8b45d92" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1ad8da4b64627522d2cf5078f1701af863" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1009e73d13b7ba45b4faaf25bb5802de" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>empty</name></member>
      <member refid="classNeoFOAM_1_1Field_1a3669f86690a09efc721a5eb902f7aa28" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac51548bd9bf092b14f8164d2bc742fd5" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a6900cfd42fa127eda30b27dd0cebd9a6" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a4320bbd12b6f44bee464a5f3aeef646c" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac25179c81371894f06f4c974fcdf081b" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac615ca8777f8e5ce7d5d9cb64cc58441" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1abe03d8f86919e510953bcaeee32ce6ad" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ab17560942b395479c075549c15188709" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae32956ac0b1a76fd4313e7f5d17e061d" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1af68426fb42f64290f1e7c32215cf2212" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>FieldValueType</name></member>
      <member refid="classNeoFOAM_1_1Field_1abcfb8d60bc581722fe51fac0af7c1a32" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1a14d497baa1b35c3503d6cc4d40b6560c" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1abbd660af736c5b000d4ad9107179810e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*=</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae72905dbd7242d18ea54360094359879" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*=</name></member>
      <member refid="classNeoFOAM_1_1Field_1abf3510745e3c8e874c92f74a6b8800a5" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator+=</name></member>
      <member refid="classNeoFOAM_1_1Field_1a043a0b776ba57671edba01e5533f092a" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator-=</name></member>
      <member refid="classNeoFOAM_1_1Field_1a274696665d8efadef9091750fe3950db" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1a8bd676379e963159ca6fdd3c5ce55f9e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1af3de837138aaea3b0aa6fd50d24e0200" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator[]</name></member>
      <member refid="classNeoFOAM_1_1Field_1a414e51331612e4b84aa3040fbd9172ab" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator[]</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1df824a46de3a2c0db14c4457ab8a34e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>range</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1c9e4d097ea90596f696bbc491587391" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>resize</name></member>
      <member refid="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size</name></member>
      <member refid="classNeoFOAM_1_1Field_1a4448dad85c0348167844faaf076c01fe" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a054ea5a37590a3da1faf3396ec450185" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>ssize</name></member>
      <member refid="classNeoFOAM_1_1Field_1af6865c7c3fc68b0f5c6ccd829ea17bc7" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>validateOtherField</name></member>
      <member refid="classNeoFOAM_1_1Field_1aba166a5c31c2c70c01f05a01c18970d0" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1aeffd125a613514fa7244fe4ff81e9026" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1a2d0d82f98e779c90b4beb695c8b974a9" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1acf22c0bbcf35668b20b954e7e90b2fe0" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1a740e49fef236461af10ec01cf9657641" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1a526066d5fecaaa45f4c60f177cf0c749" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1acda19a3113f96a8cd44b6f4b00f355a4" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1a94cfb70d69575028b3209439857f0df2" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>view</name></member>
      <member refid="classNeoFOAM_1_1Field_1a7cad3648ef3dbb9efd4429fd9ddc4860" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
