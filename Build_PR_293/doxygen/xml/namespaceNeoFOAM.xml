<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoFOAM" kind="namespace" language="C++">
    <compoundname>NeoFOAM</compoundname>
    <innerclass refid="classNeoFOAM_1_1ArgList" prot="public">NeoFOAM::ArgList</innerclass>
    <innerclass refid="classNeoFOAM_1_1BaseClassData" prot="public">NeoFOAM::BaseClassData</innerclass>
    <innerclass refid="classNeoFOAM_1_1BaseClassDocumentation" prot="public">NeoFOAM::BaseClassDocumentation</innerclass>
    <innerclass refid="classNeoFOAM_1_1BoundaryFields" prot="public">NeoFOAM::BoundaryFields</innerclass>
    <innerclass refid="classNeoFOAM_1_1BoundaryMesh" prot="public">NeoFOAM::BoundaryMesh</innerclass>
    <innerclass refid="classNeoFOAM_1_1Collection" prot="public">NeoFOAM::Collection</innerclass>
    <innerclass refid="classNeoFOAM_1_1CollectionMixin" prot="public">NeoFOAM::CollectionMixin</innerclass>
    <innerclass refid="classNeoFOAM_1_1CPUExecutor" prot="public">NeoFOAM::CPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1Database" prot="public">NeoFOAM::Database</innerclass>
    <innerclass refid="classNeoFOAM_1_1DerivedClassDocumentation" prot="public">NeoFOAM::DerivedClassDocumentation</innerclass>
    <innerclass refid="classNeoFOAM_1_1Dictionary" prot="public">NeoFOAM::Dictionary</innerclass>
    <innerclass refid="classNeoFOAM_1_1DimensionMismatch" prot="public">NeoFOAM::DimensionMismatch</innerclass>
    <innerclass refid="classNeoFOAM_1_1Document" prot="public">NeoFOAM::Document</innerclass>
    <innerclass refid="classNeoFOAM_1_1DomainField" prot="public">NeoFOAM::DomainField</innerclass>
    <innerclass refid="classNeoFOAM_1_1Error" prot="public">NeoFOAM::Error</innerclass>
    <innerclass refid="classNeoFOAM_1_1Field" prot="public">NeoFOAM::Field</innerclass>
    <innerclass refid="classNeoFOAM_1_1GPUExecutor" prot="public">NeoFOAM::GPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1NeoFOAMException" prot="public">NeoFOAM::NeoFOAMException</innerclass>
    <innerclass refid="structNeoFOAM_1_1Parameters" prot="public">NeoFOAM::Parameters</innerclass>
    <innerclass refid="structNeoFOAM_1_1RegisterDocumentation" prot="public">NeoFOAM::RegisterDocumentation</innerclass>
    <innerclass refid="classNeoFOAM_1_1RuntimeSelectionFactory" prot="public">NeoFOAM::RuntimeSelectionFactory</innerclass>
    <innerclass refid="classNeoFOAM_1_1RuntimeSelectionFactory_3_01Base_00_01Parameters_3_01Args_8_8_8_01_4_01_4" prot="public">NeoFOAM::RuntimeSelectionFactory&lt; Base, Parameters&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="classNeoFOAM_1_1SegmentedField" prot="public">NeoFOAM::SegmentedField</innerclass>
    <innerclass refid="classNeoFOAM_1_1SegmentedFieldView" prot="public">NeoFOAM::SegmentedFieldView</innerclass>
    <innerclass refid="classNeoFOAM_1_1SerialExecutor" prot="public">NeoFOAM::SerialExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1Span" prot="public">NeoFOAM::Span</innerclass>
    <innerclass refid="classNeoFOAM_1_1StencilDataBase" prot="public">NeoFOAM::StencilDataBase</innerclass>
    <innerclass refid="structNeoFOAM_1_1SumKernel" prot="public">NeoFOAM::SumKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1Time" prot="public">NeoFOAM::Time</innerclass>
    <innerclass refid="classNeoFOAM_1_1TokenList" prot="public">NeoFOAM::TokenList</innerclass>
    <innerclass refid="classNeoFOAM_1_1UnstructuredMesh" prot="public">NeoFOAM::UnstructuredMesh</innerclass>
    <innerclass refid="classNeoFOAM_1_1Vector" prot="public">NeoFOAM::Vector</innerclass>
    <innernamespace refid="namespaceNeoFOAM_1_1detail">NeoFOAM::detail</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1dsl">NeoFOAM::dsl</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1finiteVolume">NeoFOAM::finiteVolume</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1la">NeoFOAM::la</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1sundials">NeoFOAM::sundials</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1timeIntegration">NeoFOAM::timeIntegration</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a8031b90f392da83903614bb0d9da7355" prot="public" static="no">
        <type>std::function&lt; bool(<ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref>)&gt;</type>
        <definition>NeoFOAM::DocumentValidator</definition>
        <argsstring></argsstring>
        <name>DocumentValidator</name>
        <qualifiedname>NeoFOAM::DocumentValidator</qualifiedname>
        <briefdescription>
<para>A type alias for a function that validates a <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This type alias represents a function that takes a <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object as an argument and returns a boolean value indicating whether the <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> is valid or not.</para>
<para>Example usage: <programlisting><codeline><highlight class="normal"><ref refid="namespaceNeoFOAM_1a8031b90f392da83903614bb0d9da7355" kindref="member">DocumentValidator</ref><sp/>validator<sp/>=<sp/>[](<ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref><sp/>dict)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validation<sp/>logic<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>false<sp/>based<sp/>on<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" line="30" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoFOAM_1_1SerialExecutor" kindref="compound">SerialExecutor</ref>, <ref refid="classNeoFOAM_1_1CPUExecutor" kindref="compound">CPUExecutor</ref>, <ref refid="classNeoFOAM_1_1GPUExecutor" kindref="compound">GPUExecutor</ref> &gt;</type>
        <definition>using NeoFOAM::Executor = typedef std::variant&lt;SerialExecutor, CPUExecutor, GPUExecutor&gt;</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <qualifiedname>NeoFOAM::Executor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a161184af07a233e2513b53451edc6b39" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref>, <ref refid="classNeoFOAM_1_1TokenList" kindref="compound">TokenList</ref> &gt;</type>
        <definition>using NeoFOAM::Input = typedef std::variant&lt;Dictionary, TokenList&gt;</definition>
        <argsstring></argsstring>
        <name>Input</name>
        <qualifiedname>NeoFOAM::Input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/input.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/input.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a7c2c6a7a7bda94e9fb289fd81b96f745" prot="public" static="no">
        <type>int32_t</type>
        <definition>using NeoFOAM::label = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>label</name>
        <qualifiedname>NeoFOAM::label</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a95525d89d661b88aaa4548bdf2766842" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using NeoFOAM::localIdx = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>localIdx</name>
        <qualifiedname>NeoFOAM::localIdx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="17" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a73c71713ed444647b0229233de51650c" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using NeoFOAM::globalIdx = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>globalIdx</name>
        <qualifiedname>NeoFOAM::globalIdx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="19" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using NeoFOAM::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <qualifiedname>NeoFOAM::size_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="20" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a6340adc783ef78803a50be602055fba6" prot="public" static="no">
        <type>int</type>
        <definition>using NeoFOAM::mpi_label_t = typedef int</definition>
        <argsstring></argsstring>
        <name>mpi_label_t</name>
        <qualifiedname>NeoFOAM::mpi_label_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="21" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" prot="public" static="no">
        <type>float</type>
        <definition>typedef float NeoFOAM::scalar</definition>
        <argsstring></argsstring>
        <name>scalar</name>
        <qualifiedname>NeoFOAM::scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="14" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1abd392ba7f41bf81fb9e5832c80a357fa" prot="public" static="no">
        <type>std::string</type>
        <definition>using NeoFOAM::word = typedef std::string</definition>
        <argsstring></argsstring>
        <name>word</name>
        <qualifiedname>NeoFOAM::word</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/time.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/time.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a476d354d6778b23d4bd3b15eec820f47" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a7c2c6a7a7bda94e9fb289fd81b96f745" kindref="member">label</ref> &gt;</type>
        <definition>using NeoFOAM::labelField = typedef NeoFOAM::Field&lt;label&gt;</definition>
        <argsstring></argsstring>
        <name>labelField</name>
        <qualifiedname>NeoFOAM::labelField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1aa8e48fef95ea5b70125d375ba497ff8c" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt;</type>
        <definition>using NeoFOAM::scalarField = typedef NeoFOAM::Field&lt;scalar&gt;</definition>
        <argsstring></argsstring>
        <name>scalarField</name>
        <qualifiedname>NeoFOAM::scalarField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a9a20b7f140d2b360241253a62b685754" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &gt;</type>
        <definition>using NeoFOAM::vectorField = typedef NeoFOAM::Field&lt;Vector&gt;</definition>
        <argsstring></argsstring>
        <name>vectorField</name>
        <qualifiedname>NeoFOAM::vectorField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceNeoFOAM_1a381b6aacc63a05d1c0aa0774afff68f1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>constexpr scalar NeoFOAM::ROOTVSMALL</definition>
        <argsstring></argsstring>
        <name>ROOTVSMALL</name>
        <qualifiedname>NeoFOAM::ROOTVSMALL</qualifiedname>
        <initializer>= 1e-18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="17" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoFOAM_1a43b162c158f916878dc09424dd4d37d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::validateRegistration</definition>
        <argsstring>(const Type &amp;obj, const std::string errorMessage)</argsstring>
        <name>validateRegistration</name>
        <qualifiedname>NeoFOAM::validateRegistration</qualifiedname>
        <param>
          <type>const Type &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Validates that a field is registered in the database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to validate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the field is not registered in the database. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="119" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a19b432970d4c56c440ca5f4bc6670b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::hasId</definition>
        <argsstring>(Dictionary doc)</argsstring>
        <name>hasId</name>
        <qualifiedname>NeoFOAM::hasId</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref></type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Checks if a <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object has an &quot;id&quot; key. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object has an &quot;id&quot; key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> has an &quot;id&quot; key, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" line="40" column="6" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a4a11867ae32ece24e4477ed52aacbd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; NeoFOAM::name</definition>
        <argsstring>(const NeoFOAM::Document &amp;doc)</argsstring>
        <name>name</name>
        <qualifiedname>NeoFOAM::name</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Document" kindref="compound">NeoFOAM::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Retrieves the name of a <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the name of the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> by looking up the &quot;name&quot; key in the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>&apos;s <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> to retrieve the name from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The name of the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" line="109" column="19" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" declline="109" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a424023cfc2b3c52b3334b622345438c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; NeoFOAM::name</definition>
        <argsstring>(NeoFOAM::Document &amp;doc)</argsstring>
        <name>name</name>
        <qualifiedname>NeoFOAM::name</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Document" kindref="compound">NeoFOAM::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Retrieves the name of a <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the name of the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> by looking up the &quot;name&quot; key in the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>&apos;s <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> to retrieve the name from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The name of the <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" line="120" column="13" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/document.hpp" declline="120" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a9ecd7090c554081dd6200a92fb0f6b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoFOAM::demangle</definition>
        <argsstring>(const char *mangledName)</argsstring>
        <name>demangle</name>
        <qualifiedname>NeoFOAM::demangle</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mangledName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" line="16" column="13" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ad0a06ebc4aa82a65353cdc36eb19810e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::logBadAnyCast</definition>
        <argsstring>(const std::bad_any_cast &amp;e, const Key &amp;key, const Container &amp;data)</argsstring>
        <name>logBadAnyCast</name>
        <qualifiedname>NeoFOAM::logBadAnyCast</qualifiedname>
        <param>
          <type>const std::bad_any_cast &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" line="19" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1af6f9721ae18e83a58215ddfbba7413b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::logOutRange</definition>
        <argsstring>(const std::out_of_range &amp;e, const std::string &amp;key, const std::unordered_map&lt; std::string, std::any &gt; &amp;data)</argsstring>
        <name>logOutRange</name>
        <qualifiedname>NeoFOAM::logOutRange</qualifiedname>
        <param>
          <type>const std::out_of_range &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; std::string, std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/dictionary.hpp" line="15" column="6" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/dictionary.hpp" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ace895d0abfec1573f663b84e098f7a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator==</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>NeoFOAM::operator==</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are equal, i.e. they are of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="24" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="24" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a4354d14390c6cd1d3a813869a7aff63b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator!=</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>NeoFOAM::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are not equal, i.e. they are not of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors not are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="51" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a11cb8ffac85b2e8d34007c806b5edaf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataClass</type>
          </param>
        </templateparamlist>
        <type>DataClass</type>
        <definition>DataClass NeoFOAM::read</definition>
        <argsstring>(Input input)</argsstring>
        <name>read</name>
        <qualifiedname>NeoFOAM::read</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoFOAM_1a161184af07a233e2513b53451edc6b39" kindref="member">Input</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/input.hpp" line="16" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/input.hpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae2c722dbedf8901153be15abfe9c1926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoFOAM::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="27" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="27" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a51404323e84e5d40f782183e04260f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoFOAM::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="55" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="55" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aeeea97cb8f4ff1bcf6f5d7727582d0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForFieldKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(const Executor &amp;exec, Field&lt; ValueType &gt; &amp;field, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoFOAM::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="74" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="74" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a743adc3b4e757dceeb8a8909047fdc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForFieldKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;field, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoFOAM::parallelFor</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="102" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a64951263f8419915d4717c4bc76005b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoFOAM::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="108" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="108" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac54afd3ca9f48982f18b894908855416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoFOAM::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="137" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a2275939b92597c0b9cf802eea67e1da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(const Executor &amp;exec, Field&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoFOAM::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="146" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="146" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae3937be91de80536a70f2e020edbdab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoFOAM::parallelReduce</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="175" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac261f9695ee3ef30f1aba6e5c44e67bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelScan</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoFOAM::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="181" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="181" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a5b8d6853fc05246a8ed89db7d88badee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelScan</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoFOAM::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="191" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1afbfeb99db57b54fe06c59babef5e118c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelScan</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, ReturnType &amp;returnValue)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoFOAM::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>returnValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="197" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="197" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a1fbe805af7f4710f16ec7fbf18b87741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelScan</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, ReturnType &amp;returnValue)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoFOAM::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>returnValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="212" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a053ee737fedb76474f5161d35617cc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a95525d89d661b88aaa4548bdf2766842" kindref="member">localIdx</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION localIdx NeoFOAM::one&lt; localIdx &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; localIdx &gt;</name>
        <qualifiedname>NeoFOAM::one&lt; localIdx &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="25" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a33f695ee3f41f89d07a7b57e634ae5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a95525d89d661b88aaa4548bdf2766842" kindref="member">localIdx</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION localIdx NeoFOAM::zero&lt; localIdx &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; localIdx &gt;</name>
        <qualifiedname>NeoFOAM::zero&lt; localIdx &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="31" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1abb63e8a2f557cc72e042ff949ea576da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::mag</definition>
        <argsstring>(const scalar &amp;s)</argsstring>
        <name>mag</name>
        <qualifiedname>NeoFOAM::mag</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="20" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a61e64ff318800115e2a634dec8deeaf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::one&lt; scalar &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; scalar &gt;</name>
        <qualifiedname>NeoFOAM::one&lt; scalar &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="24" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a80a080c3cd54b64a0e62c8c0bfa92003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::zero&lt; scalar &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; scalar &gt;</name>
        <qualifiedname>NeoFOAM::zero&lt; scalar &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="30" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1af5cfb39be72442f94c11659de5dbb2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION T</type>
        <definition>KOKKOS_INLINE_FUNCTION T NeoFOAM::one</definition>
        <argsstring>()</argsstring>
        <name>one</name>
        <qualifiedname>NeoFOAM::one</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/traits.hpp" line="12" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/traits.hpp" bodystart="12" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a908f24d4170f083873a8ec9cd1dcfb01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION T</type>
        <definition>KOKKOS_INLINE_FUNCTION T NeoFOAM::zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <qualifiedname>NeoFOAM::zero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/traits.hpp" line="19" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/traits.hpp" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac48edf8d161ff1ee717e5fba3a93d770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::operator*</definition>
        <argsstring>(const scalar &amp;sclr, Vector rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoFOAM::operator*</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &amp;</type>
          <declname>sclr</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="149" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="149" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aa664d830bfb92f5fba7ce092d4696ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::operator&amp;</definition>
        <argsstring>(const Vector &amp;lhs, Vector rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>NeoFOAM::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="156" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a30753699ca02c237b4081286380cabd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::mag</definition>
        <argsstring>(const Vector &amp;vec)</argsstring>
        <name>mag</name>
        <qualifiedname>NeoFOAM::mag</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="162" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a33d4783ebbf9904dce966898f9f0abb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; NeoFOAM::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Vector &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>NeoFOAM::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="164" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aa4097dc6f8dd4b4e9b9ba5df98ad4298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::one&lt; Vector &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; Vector &gt;</name>
        <qualifiedname>NeoFOAM::one&lt; Vector &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="168" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1adf76fd17d3c0ff0df158e838feb1a8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::zero&lt; Vector &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; Vector &gt;</name>
        <qualifiedname>NeoFOAM::zero&lt; Vector &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="174" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae20bfb586b5469d94d83f3ca57310c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::logOutRange</definition>
        <argsstring>(const std::out_of_range &amp;e, const std::size_t &amp;key, const std::vector&lt; std::any &gt; &amp;data)</argsstring>
        <name>logOutRange</name>
        <qualifiedname>NeoFOAM::logOutRange</qualifiedname>
        <param>
          <type>const std::out_of_range &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::size_t &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/tokenList.hpp" line="14" column="6" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/tokenList.hpp" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a72c33feea028e1966251dc0430ca8651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt; T &gt; NeoFOAM::operator+</definition>
        <argsstring>(Field&lt; T &gt; lhs, const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>NeoFOAM::operator+</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of two fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="303" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a7c9cbcc523297970cc4d1b13bde319d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt; T &gt; NeoFOAM::operator-</definition>
        <argsstring>(Field&lt; T &gt; lhs, const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>NeoFOAM::operator-</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction one field from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="316" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a58f995a6ce3861bf1eb92ca1e6a36739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Inner</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::map</definition>
        <argsstring>(Field&lt; T &gt; &amp;a, const Inner inner, std::pair&lt; size_t, size_t &gt; range={0, 0})</argsstring>
        <name>map</name>
        <qualifiedname>NeoFOAM::map</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Inner</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Map a field using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply to each element of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to map the field in. If not provided, the whole field is mapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="29" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1af46b35c634f08c04bccff09bd6a3af66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::fill</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const std::type_identity_t&lt; ValueType &gt; value, std::pair&lt; size_t, size_t &gt; range={0, 0})</argsstring>
        <name>fill</name>
        <qualifiedname>NeoFOAM::fill</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::type_identity_t&lt; ValueType &gt;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Fill the field with a scalar value using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to fill the field with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to fill the field in. If not provided, the whole field is filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="50" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a3fe703c8f8b0434936a60f4df8722e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::setField</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const std::span&lt; const std::type_identity_t&lt; ValueType &gt; &gt; b, std::pair&lt; size_t, size_t &gt; range={0, 0})</argsstring>
        <name>setField</name>
        <qualifiedname>NeoFOAM::setField</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::span&lt; const std::type_identity_t&lt; ValueType &gt; &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Set the field with a span of values using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The span of values to set the field with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to set the field in. If not provided, the whole field is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="76" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="76" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac01b20b250317d645c4136a73fc4effb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::scalarMul</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const scalar value)</argsstring>
        <name>scalarMul</name>
        <qualifiedname>NeoFOAM::scalarMul</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="94" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a44787ff1266d4f5ebd1660b821eee43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::add</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b)</argsstring>
        <name>add</name>
        <qualifiedname>NeoFOAM::add</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="121" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a9f396f6dfb0e34f0d24af75126fa8389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::sub</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b)</argsstring>
        <name>sub</name>
        <qualifiedname>NeoFOAM::sub</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="130" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a26a9eb02ca18ce5e0cef1ee135c5a3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::mul</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; scalar &gt; &amp;b)</argsstring>
        <name>mul</name>
        <qualifiedname>NeoFOAM::mul</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="138" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="138" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae31c35461ab0f69ee4c8309b18cd1143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoFOAM::spans</definition>
        <argsstring>(Args &amp;... fields)</argsstring>
        <name>spans</name>
        <qualifiedname>NeoFOAM::spans</qualifiedname>
        <param>
          <type>Args &amp;...</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="146" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a374c57db6afb96ab76b48e6868082c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoFOAM::copyToHosts</definition>
        <argsstring>(Args &amp;... fields)</argsstring>
        <name>copyToHosts</name>
        <qualifiedname>NeoFOAM::copyToHosts</qualifiedname>
        <param>
          <type>Args &amp;...</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="152" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a9cb7eae57c041b049ff2dcd222cc9573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(Field&lt; T &gt; &amp;field, T value)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoFOAM::equal</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="158" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="158" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a80e6bdcbd3aa2c4474cb7d96cd96e35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field, const Field&lt; T &gt; &amp;field2)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoFOAM::equal</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="173" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="173" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aa1215531419eead5c9138707a854d9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field, std::span&lt; T &gt; span2)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoFOAM::equal</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::span&lt; T &gt;</type>
          <declname>span2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" line="195" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldFreeFunctions.hpp" bodystart="195" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a3c93e0b750c8dc9feb1621daf2da6915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
        </templateparamlist>
        <type>IndexType</type>
        <definition>IndexType NeoFOAM::segmentsFromIntervals</definition>
        <argsstring>(const Field&lt; IndexType &gt; &amp;intervals, Field&lt; IndexType &gt; &amp;offsets)</argsstring>
        <name>segmentsFromIntervals</name>
        <qualifiedname>NeoFOAM::segmentsFromIntervals</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; IndexType &gt; &amp;</type>
          <declname>intervals</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; IndexType &gt; &amp;</type>
          <declname>offsets</declname>
        </param>
        <briefdescription>
<para>Compute segment offsets from an input field corresponding to lengths by computing a prefix sum. </para>
        </briefdescription>
        <detaileddescription>
<para>The offsets are computed by a prefix sum of the input values. So, with given input of {1, 2, 3, 4, 5} the offsets are {0, 1, 3, 6, 10, 15}. Note that the length of offSpan must be length of intervals + 1 and are all elements of offSpan are required to be zero</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to compute the offsets from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to store the resulting offsets in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/segmentedField.hpp" line="24" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/segmentedField.hpp" bodystart="24" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a99bff8ff2aa41c8015bdb6c509ee5567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref></type>
        <definition>UnstructuredMesh NeoFOAM::createSingleCellMesh</definition>
        <argsstring>(const Executor exec)</argsstring>
        <name>createSingleCellMesh</name>
        <qualifiedname>NeoFOAM::createSingleCellMesh</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>creates a mesh containing only a single cell @warn currently this is only a 2D mesh </para>
        </briefdescription>
        <detaileddescription>
<para>a 2D mesh in 3D space with left, right, top, bottom boundary faces with the centre at (0.5, 0.5, 0.0) left, top, right, bottom faces and four boundaries one left, right, top, bottom </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" line="284" column="18" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" declline="284" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1afdb9b151e2c17ce2b8065fe66989ce3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref></type>
        <definition>UnstructuredMesh NeoFOAM::create1DUniformMesh</definition>
        <argsstring>(const Executor exec, const size_t nCells)</argsstring>
        <name>create1DUniformMesh</name>
        <qualifiedname>NeoFOAM::create1DUniformMesh</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>nCells</declname>
        </param>
        <briefdescription>
<para>A factory function for a 1D mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>A 1D mesh in 3D space in which each cell has a left and a right face. The 1D mesh is aligned with the x coordinate of Cartesian coordinate system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" line="291" column="18" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" declline="291" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="13" column="1"/>
  </compounddef>
</doxygen>
