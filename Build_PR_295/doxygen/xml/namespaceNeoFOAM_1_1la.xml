<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoFOAM_1_1la" kind="namespace" language="C++">
    <compoundname>NeoFOAM::la</compoundname>
    <innerclass refid="classNeoFOAM_1_1la_1_1CSRMatrix" prot="public">NeoFOAM::la::CSRMatrix</innerclass>
    <innerclass refid="structNeoFOAM_1_1la_1_1CSRMatrixView" prot="public">NeoFOAM::la::CSRMatrixView</innerclass>
    <innerclass refid="classNeoFOAM_1_1la_1_1LinearSystem" prot="public">NeoFOAM::la::LinearSystem</innerclass>
    <innerclass refid="structNeoFOAM_1_1la_1_1LinearSystemView" prot="public">NeoFOAM::la::LinearSystemView</innerclass>
    <innerclass refid="classNeoFOAM_1_1la_1_1Solver" prot="public">NeoFOAM::la::Solver</innerclass>
    <innerclass refid="classNeoFOAM_1_1la_1_1SolverFactory" prot="public">NeoFOAM::la::SolverFactory</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoFOAM_1_1la_1ad2b56043f07e635e944df6d43a1f4701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeIn</type>
          </param>
          <param>
            <type>typename IndexTypeIn</type>
          </param>
          <param>
            <type>typename ValueTypeOut</type>
          </param>
          <param>
            <type>typename IndexTypeOut</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1la_1_1CSRMatrix" kindref="compound">la::CSRMatrix</ref>&lt; ValueTypeOut, IndexTypeOut &gt;</type>
        <definition>la::CSRMatrix&lt; ValueTypeOut, IndexTypeOut &gt; NeoFOAM::la::convert</definition>
        <argsstring>(const Executor exec, const la::CSRMatrixView&lt; ValueTypeIn, IndexTypeIn &gt; in)</argsstring>
        <name>convert</name>
        <qualifiedname>NeoFOAM::la::convert</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aaa4d35d275559f501cb6a1eec717c905" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="structNeoFOAM_1_1la_1_1CSRMatrixView" kindref="compound">la::CSRMatrixView</ref>&lt; ValueTypeIn, IndexTypeIn &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/CSRMatrix.hpp" line="228" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/CSRMatrix.hpp" bodystart="228" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1_1la_1ae0b968126800a1666c6d324d088b0dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename IndexType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoFOAM::la::spmv</definition>
        <argsstring>(LinearSystem&lt; ValueType, IndexType &gt; &amp;ls, Field&lt; ValueType &gt; &amp;xfield)</argsstring>
        <name>spmv</name>
        <qualifiedname>NeoFOAM::la::spmv</qualifiedname>
        <param>
          <type><ref refid="classNeoFOAM_1_1la_1_1LinearSystem" kindref="compound">LinearSystem</ref>&lt; ValueType, IndexType &gt; &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>xfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" line="103" column="7" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" bodystart="103" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1_1la_1af252c3a01746972d1f67311305f6515c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeIn</type>
          </param>
          <param>
            <type>typename IndexTypeIn</type>
          </param>
          <param>
            <type>typename ValueTypeOut</type>
          </param>
          <param>
            <type>typename IndexTypeOut</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1la_1_1LinearSystem" kindref="compound">LinearSystem</ref>&lt; ValueTypeOut, IndexTypeOut &gt;</type>
        <definition>LinearSystem&lt; ValueTypeOut, IndexTypeOut &gt; NeoFOAM::la::convertLinearSystem</definition>
        <argsstring>(const LinearSystem&lt; ValueTypeIn, IndexTypeIn &gt; &amp;ls)</argsstring>
        <name>convertLinearSystem</name>
        <qualifiedname>NeoFOAM::la::convertLinearSystem</qualifiedname>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1la_1_1LinearSystem" kindref="compound">LinearSystem</ref>&lt; ValueTypeIn, IndexTypeIn &gt; &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" line="133" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" bodystart="133" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1_1la_1a6aad8cc3be3c00507a018149a38cd17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename SparsityType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1la_1_1LinearSystem" kindref="compound">LinearSystem</ref>&lt; ValueType, IndexType &gt;</type>
        <definition>LinearSystem&lt; ValueType, IndexType &gt; NeoFOAM::la::createEmptyLinearSystem</definition>
        <argsstring>(const SparsityType &amp;sparsity)</argsstring>
        <name>createEmptyLinearSystem</name>
        <qualifiedname>NeoFOAM::la::createEmptyLinearSystem</qualifiedname>
        <param>
          <type>const SparsityType &amp;</type>
          <declname>sparsity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" line="148" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/linearSystem.hpp" bodystart="148" bodyend="161"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/linearAlgebra/CSRMatrix.hpp" line="10" column="1"/>
  </compounddef>
</doxygen>
