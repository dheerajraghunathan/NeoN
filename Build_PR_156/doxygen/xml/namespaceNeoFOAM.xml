<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceNeoFOAM" kind="namespace" language="C++">
    <compoundname>NeoFOAM</compoundname>
    <innerclass refid="classNeoFOAM_1_1Dictionary" prot="public">NeoFOAM::Dictionary</innerclass>
    <innerclass refid="classNeoFOAM_1_1NeoFOAMException" prot="public">NeoFOAM::NeoFOAMException</innerclass>
    <innerclass refid="classNeoFOAM_1_1CPUExecutor" prot="public">NeoFOAM::CPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1GPUExecutor" prot="public">NeoFOAM::GPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1SerialExecutor" prot="public">NeoFOAM::SerialExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1Field" prot="public">NeoFOAM::Field</innerclass>
    <innerclass refid="classNeoFOAM_1_1Vector" prot="public">NeoFOAM::Vector</innerclass>
    <innerclass refid="classNeoFOAM_1_1BaseClassData" prot="public">NeoFOAM::BaseClassData</innerclass>
    <innerclass refid="classNeoFOAM_1_1BaseClassDocumentation" prot="public">NeoFOAM::BaseClassDocumentation</innerclass>
    <innerclass refid="structNeoFOAM_1_1RegisterDocumentation" prot="public">NeoFOAM::RegisterDocumentation</innerclass>
    <innerclass refid="classNeoFOAM_1_1DerivedClassDocumentation" prot="public">NeoFOAM::DerivedClassDocumentation</innerclass>
    <innerclass refid="structNeoFOAM_1_1Parameters" prot="public">NeoFOAM::Parameters</innerclass>
    <innerclass refid="classNeoFOAM_1_1RuntimeSelectionFactory" prot="public">NeoFOAM::RuntimeSelectionFactory</innerclass>
    <innerclass refid="classNeoFOAM_1_1RuntimeSelectionFactory_3_01Base_00_01Parameters_3_01Args_8_8_8_01_4_01_4" prot="public">NeoFOAM::RuntimeSelectionFactory&lt; Base, Parameters&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="classNeoFOAM_1_1ArgList" prot="public">NeoFOAM::ArgList</innerclass>
    <innerclass refid="classNeoFOAM_1_1Time" prot="public">NeoFOAM::Time</innerclass>
    <innerclass refid="classNeoFOAM_1_1TokenList" prot="public">NeoFOAM::TokenList</innerclass>
    <innerclass refid="classNeoFOAM_1_1BoundaryFields" prot="public">NeoFOAM::BoundaryFields</innerclass>
    <innerclass refid="classNeoFOAM_1_1DomainField" prot="public">NeoFOAM::DomainField</innerclass>
    <innerclass refid="structNeoFOAM_1_1SumKernel" prot="public">NeoFOAM::SumKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1StencilDataBase" prot="public">NeoFOAM::StencilDataBase</innerclass>
    <innerclass refid="classNeoFOAM_1_1Error" prot="public">NeoFOAM::Error</innerclass>
    <innerclass refid="classNeoFOAM_1_1DimensionMismatch" prot="public">NeoFOAM::DimensionMismatch</innerclass>
    <innerclass refid="classNeoFOAM_1_1BoundaryMesh" prot="public">NeoFOAM::BoundaryMesh</innerclass>
    <innerclass refid="structNeoFOAM_1_1NodeCommMap" prot="public">NeoFOAM::NodeCommMap</innerclass>
    <innerclass refid="classNeoFOAM_1_1Communicator" prot="public">NeoFOAM::Communicator</innerclass>
    <innerclass refid="classNeoFOAM_1_1UnstructuredMesh" prot="public">NeoFOAM::UnstructuredMesh</innerclass>
    <innernamespace refid="namespaceNeoFOAM_1_1detail">NeoFOAM::detail</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1finiteVolume">NeoFOAM::finiteVolume</innernamespace>
    <innernamespace refid="namespaceNeoFOAM_1_1mpi">NeoFOAM::mpi</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoFOAM_1_1CPUExecutor" kindref="compound">CPUExecutor</ref>, <ref refid="classNeoFOAM_1_1GPUExecutor" kindref="compound">GPUExecutor</ref>, <ref refid="classNeoFOAM_1_1SerialExecutor" kindref="compound">SerialExecutor</ref> &gt;</type>
        <definition>using NeoFOAM::Executor = typedef std::variant&lt;CPUExecutor, GPUExecutor, SerialExecutor&gt;</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a161184af07a233e2513b53451edc6b39" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref>, <ref refid="classNeoFOAM_1_1TokenList" kindref="compound">TokenList</ref> &gt;</type>
        <definition>using NeoFOAM::Input = typedef std::variant&lt;Dictionary, TokenList&gt;</definition>
        <argsstring></argsstring>
        <name>Input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/inputs.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/inputs.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a7c2c6a7a7bda94e9fb289fd81b96f745" prot="public" static="no">
        <type>int32_t</type>
        <definition>using NeoFOAM::label = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a95525d89d661b88aaa4548bdf2766842" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using NeoFOAM::localIdx = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>localIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a73c71713ed444647b0229233de51650c" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using NeoFOAM::globalIdx = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>globalIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using NeoFOAM::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="17" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a6340adc783ef78803a50be602055fba6" prot="public" static="no">
        <type>int</type>
        <definition>using NeoFOAM::mpi_label_t = typedef int</definition>
        <argsstring></argsstring>
        <name>mpi_label_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" line="18" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/label.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" prot="public" static="no">
        <type>float</type>
        <definition>typedef float NeoFOAM::scalar</definition>
        <argsstring></argsstring>
        <name>scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="11" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1abd392ba7f41bf81fb9e5832c80a357fa" prot="public" static="no">
        <type>std::string</type>
        <definition>using NeoFOAM::word = typedef std::string</definition>
        <argsstring></argsstring>
        <name>word</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/time.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/time.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a476d354d6778b23d4bd3b15eec820f47" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a7c2c6a7a7bda94e9fb289fd81b96f745" kindref="member">label</ref> &gt;</type>
        <definition>using NeoFOAM::labelField = typedef NeoFOAM::Field&lt;label&gt;</definition>
        <argsstring></argsstring>
        <name>labelField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1aa8e48fef95ea5b70125d375ba497ff8c" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt;</type>
        <definition>using NeoFOAM::scalarField = typedef NeoFOAM::Field&lt;scalar&gt;</definition>
        <argsstring></argsstring>
        <name>scalarField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a9a20b7f140d2b360241253a62b685754" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &gt;</type>
        <definition>using NeoFOAM::vectorField = typedef NeoFOAM::Field&lt;Vector&gt;</definition>
        <argsstring></argsstring>
        <name>vectorField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/fieldTypeDefs.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1accb500ad59c99ee6538533036039b6b4" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structNeoFOAM_1_1NodeCommMap" kindref="compound">NodeCommMap</ref> &gt;</type>
        <definition>using NeoFOAM::RankCommMap = typedef std::vector&lt;NodeCommMap&gt;</definition>
        <argsstring></argsstring>
        <name>RankCommMap</name>
        <briefdescription>
<para>Represents a mapping of <ref refid="structNeoFOAM_1_1NodeCommMap" kindref="compound">NodeCommMap</ref> for a rank. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/communicator.hpp" line="29" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/communicator.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoFOAM_1a3daa9ed0aec5483218e5946371398db5" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespaceNeoFOAM_1accb500ad59c99ee6538533036039b6b4" kindref="member">RankCommMap</ref> &gt;</type>
        <definition>using NeoFOAM::CommMap = typedef std::vector&lt;RankCommMap&gt;</definition>
        <argsstring></argsstring>
        <name>CommMap</name>
        <briefdescription>
<para>Represents, for a single map, a mapping of all RankCommMaps for either send or receive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/communicator.hpp" line="34" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/communicator.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceNeoFOAM_1a037f3125015bc55f8d1b66b8b8b91c0b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept NeoFOAM::parallelForKernel</definition>
        <argsstring></argsstring>
        <name>parallelForKernel</name>
        <initializer>= requires(Kernel t, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> i) {
    {
        t(i)
    } -&gt; std::same_as&lt;void&gt;;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="20" column="9" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceNeoFOAM_1a09f75c6e1546ac2ca214c7cb301ea784" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept NeoFOAM::parallelForFieldKernel</definition>
        <argsstring></argsstring>
        <name>parallelForFieldKernel</name>
        <initializer>= requires(Kernel t, ValueType val, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> i) {
    {
        t(i)
    } -&gt; std::same_as&lt;ValueType&gt;;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="59" column="9" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceNeoFOAM_1a381b6aacc63a05d1c0aa0774afff68f1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>constexpr scalar NeoFOAM::ROOTVSMALL</definition>
        <argsstring></argsstring>
        <name>ROOTVSMALL</name>
        <initializer>= 1e-18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" line="14" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/scalar.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoFOAM_1a9ecd7090c554081dd6200a92fb0f6b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoFOAM::demangle</definition>
        <argsstring>(const char *mangledName)</argsstring>
        <name>demangle</name>
        <param>
          <type>const char *</type>
          <declname>mangledName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" line="12" column="13" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" declline="12" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ad0a06ebc4aa82a65353cdc36eb19810e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::logBadAnyCast</definition>
        <argsstring>(const std::bad_any_cast &amp;e, const Key &amp;key, const Container &amp;data)</argsstring>
        <name>logBadAnyCast</name>
        <param>
          <type>const std::bad_any_cast &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" line="15" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" bodystart="15" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1af6f9721ae18e83a58215ddfbba7413b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::logOutRange</definition>
        <argsstring>(const std::out_of_range &amp;e, const std::string &amp;key, const std::unordered_map&lt; std::string, std::any &gt; &amp;data)</argsstring>
        <name>logOutRange</name>
        <param>
          <type>const std::out_of_range &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; std::string, std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/dictionary.hpp" line="17" column="6" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/dictionary.hpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ace895d0abfec1573f663b84e098f7a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator==</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are equal, i.e. they are of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="21" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="21" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a4354d14390c6cd1d3a813869a7aff63b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator!=</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are not equal, i.e. they are not of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors not are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="48" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae9443ed34cbae06fde725760bdc69d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class dataClass</type>
          </param>
        </templateparamlist>
        <type>dataClass</type>
        <definition>dataClass NeoFOAM::read</definition>
        <argsstring>(Input input)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="namespaceNeoFOAM_1a161184af07a233e2513b53451edc6b39" kindref="member">Input</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/inputs.hpp" line="16" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/inputs.hpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aac4885dd6833b52cee698c733256d915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>([[maybe_unused]] const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel)</argsstring>
        <name>parallelFor</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="27" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="27" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a7958ee996f48991cc3013b06fee9deff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel)</argsstring>
        <name>parallelFor</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="52" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1adc9840896f54c66ca5b2b1465ebecd79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForFieldKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>([[maybe_unused]] const Executor &amp;exec, Field&lt; ValueType &gt; &amp;field, Kernel kernel)</argsstring>
        <name>parallelFor</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="66" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="66" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aa6593b8c44b02d9aa59c46cb2f4346c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForFieldKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelFor</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;field, Kernel kernel)</argsstring>
        <name>parallelFor</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="88" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aaa3913d7e82b4c18abc95344d6c768be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>([[maybe_unused]] const Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="95" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="95" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac54afd3ca9f48982f18b894908855416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, std::pair&lt; size_t, size_t &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">NeoFOAM::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="117" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae33ff87f57c9d3c1adf67ccabb70e4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>([[maybe_unused]] const Executor &amp;exec, Field&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="126" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="126" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae3937be91de80536a70f2e020edbdab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::parallelReduce</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" line="147" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/parallelAlgorithms.hpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ac48edf8d161ff1ee717e5fba3a93d770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::operator*</definition>
        <argsstring>(const scalar &amp;sclr, Vector rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &amp;</type>
          <declname>sclr</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="138" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae0612f5f17d093a87670be33b3d0608f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::operator&amp;</definition>
        <argsstring>(const Vector &amp;lhs, Vector rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="145" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a30753699ca02c237b4081286380cabd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::mag</definition>
        <argsstring>(const Vector &amp;vec)</argsstring>
        <name>mag</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="151" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a1a4d22c38abaa5c1954a0d5925f75f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; NeoFOAM::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Vector &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" line="153" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/primitives/vector.hpp" declline="153" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a413f6a0c9a42b08e621a25f23c72dcd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::operator+</definition>
        <argsstring>(Field&lt; T &gt; lhs, const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of two fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="427" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a2aee7a8bd5a4e339456ee8e31f92a852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::operator-</definition>
        <argsstring>(Field&lt; T &gt; lhs, const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction one field from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="440" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="440" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a9cb7eae57c041b049ff2dcd222cc9573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(Field&lt; T &gt; &amp;field, T value)</argsstring>
        <name>equal</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" line="13" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" bodystart="13" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a80e6bdcbd3aa2c4474cb7d96cd96e35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field, const Field&lt; T &gt; &amp;field2)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" line="28" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" bodystart="28" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aa1215531419eead5c9138707a854d9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::equal</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field, std::span&lt; T &gt; span2)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::span&lt; T &gt;</type>
          <declname>span2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" line="50" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/comparison.hpp" bodystart="50" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a33ee4264037f5c9c9d7e2b8db186814b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Inner</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::map</definition>
        <argsstring>(Field&lt; T &gt; &amp;a, const Inner inner)</argsstring>
        <name>map</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Inner</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="21" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a59bbe30bafaeee43e28708c8a90ca415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::fill</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const std::type_identity_t&lt; ValueType &gt; value)</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::type_identity_t&lt; ValueType &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="27" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aaf26f938f6450cf9dd434f14ea3be008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::setField</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const std::span&lt; const std::type_identity_t&lt; ValueType &gt;&gt; b)</argsstring>
        <name>setField</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::span&lt; const std::type_identity_t&lt; ValueType &gt;&gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="36" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1aee17902cea88cbe34c693d02eb681273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::scalarMul</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const std::type_identity_t&lt; ValueType &gt; value)</argsstring>
        <name>scalarMul</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::type_identity_t&lt; ValueType &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="44" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1abe703c6469f62100aee459aa473093a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::add</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="69" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a863a0a3df9fbfb8a3638dd5a4c213904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::sub</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;b)</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="78" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a1552926896ff295d08ca60578bd97725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::mul</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;a, const Field&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;b)</argsstring>
        <name>mul</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; std::type_identity_t&lt; ValueType &gt;&gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="86" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1ae31c35461ab0f69ee4c8309b18cd1143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoFOAM::spans</definition>
        <argsstring>(Args &amp;... fields)</argsstring>
        <name>spans</name>
        <param>
          <type>Args &amp;...</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="94" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a374c57db6afb96ab76b48e6868082c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoFOAM::copyToHosts</definition>
        <argsstring>(Args &amp;... fields)</argsstring>
        <name>copyToHosts</name>
        <param>
          <type>Args &amp;...</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" line="100" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/operationsMacros.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a4dcbfd98270c4706062b4786eedbfdf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T NeoFOAM::sum</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" line="58" column="3" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1abb0c8601a46eedab6970aa13093fec6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
        <definition>scalar NeoFOAM::sum</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;field)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" line="67" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" bodystart="67" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoFOAM_1a99bff8ff2aa41c8015bdb6c509ee5567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref></type>
        <definition>UnstructuredMesh NeoFOAM::createSingleCellMesh</definition>
        <argsstring>(const Executor exec)</argsstring>
        <name>createSingleCellMesh</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>creates a mesh containing only a single cell @warn currently this is only a 2D mesh </para>
        </briefdescription>
        <detaileddescription>
<para>a 2D mesh in 3D space with left, right, top, bottom boundary faces with the centre at (0.5, 0.5, 0.0) left, top, right, bottom faces and four boundaries one left, right, top, bottom </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" line="282" column="18" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/mesh/unstructured/unstructuredMesh.hpp" declline="282" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/demangle.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
