<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoN_1_1finiteVolume_1_1cellCentred" kind="namespace" language="C++">
    <compoundname>NeoN::finiteVolume::cellCentred</compoundname>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1BasicGeometryScheme" prot="public">NeoN::finiteVolume::cellCentred::BasicGeometryScheme</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1BoundaryPatchMixin" prot="public">NeoN::finiteVolume::cellCentred::BoundaryPatchMixin</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1CellToFaceStencil" prot="public">NeoN::finiteVolume::cellCentred::CellToFaceStencil</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1CreateFromExistingField" prot="public">NeoN::finiteVolume::cellCentred::CreateFromExistingField</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1DdtOperator" prot="public">NeoN::finiteVolume::cellCentred::DdtOperator</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1DivOperator" prot="public">NeoN::finiteVolume::cellCentred::DivOperator</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1DivOperatorFactory" prot="public">NeoN::finiteVolume::cellCentred::DivOperatorFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1Expression" prot="public">NeoN::finiteVolume::cellCentred::Expression</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FaceNormalGradient" prot="public">NeoN::finiteVolume::cellCentred::FaceNormalGradient</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FaceNormalGradientFactory" prot="public">NeoN::finiteVolume::cellCentred::FaceNormalGradientFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldCollection" prot="public">NeoN::finiteVolume::cellCentred::FieldCollection</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" prot="public">NeoN::finiteVolume::cellCentred::FieldDocument</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GaussGreenDiv" prot="public">NeoN::finiteVolume::cellCentred::GaussGreenDiv</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GaussGreenGrad" prot="public">NeoN::finiteVolume::cellCentred::GaussGreenGrad</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GaussGreenLaplacian" prot="public">NeoN::finiteVolume::cellCentred::GaussGreenLaplacian</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GeometricFieldMixin" prot="public">NeoN::finiteVolume::cellCentred::GeometricFieldMixin</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GeometryScheme" prot="public">NeoN::finiteVolume::cellCentred::GeometryScheme</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GeometrySchemeFactory" prot="public">NeoN::finiteVolume::cellCentred::GeometrySchemeFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1LaplacianOperator" prot="public">NeoN::finiteVolume::cellCentred::LaplacianOperator</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1LaplacianOperatorFactory" prot="public">NeoN::finiteVolume::cellCentred::LaplacianOperatorFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1Linear" prot="public">NeoN::finiteVolume::cellCentred::Linear</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1OldTimeCollection" prot="public">NeoN::finiteVolume::cellCentred::OldTimeCollection</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1OldTimeDocument" prot="public">NeoN::finiteVolume::cellCentred::OldTimeDocument</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SourceTerm" prot="public">NeoN::finiteVolume::cellCentred::SourceTerm</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SparsityPattern" prot="public">NeoN::finiteVolume::cellCentred::SparsityPattern</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceBoundary" prot="public">NeoN::finiteVolume::cellCentred::SurfaceBoundary</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceBoundaryFactory" prot="public">NeoN::finiteVolume::cellCentred::SurfaceBoundaryFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" prot="public">NeoN::finiteVolume::cellCentred::SurfaceField</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceIntegrate" prot="public">NeoN::finiteVolume::cellCentred::SurfaceIntegrate</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceInterpolation" prot="public">NeoN::finiteVolume::cellCentred::SurfaceInterpolation</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceInterpolationFactory" prot="public">NeoN::finiteVolume::cellCentred::SurfaceInterpolationFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1Uncorrected" prot="public">NeoN::finiteVolume::cellCentred::Uncorrected</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1Upwind" prot="public">NeoN::finiteVolume::cellCentred::Upwind</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeBoundary" prot="public">NeoN::finiteVolume::cellCentred::VolumeBoundary</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeBoundaryFactory" prot="public">NeoN::finiteVolume::cellCentred::VolumeBoundaryFactory</innerclass>
    <innerclass refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" prot="public">NeoN::finiteVolume::cellCentred::VolumeField</innerclass>
    <innernamespace refid="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary">NeoN::finiteVolume::cellCentred::surfaceBoundary</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary">NeoN::finiteVolume::cellCentred::volumeBoundary</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a6ddd91c3d3376132de950873c376ccc8" prot="public" static="no">
        <type>std::function&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref>(<ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref> &amp;db)&gt;</type>
        <definition>using NeoN::finiteVolume::cellCentred::CreateFunction = typedef std::function&lt;FieldDocument(NeoN::Database&amp; db)&gt;</definition>
        <argsstring></argsstring>
        <name>CreateFunction</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::CreateFunction</qualifiedname>
        <briefdescription>
<para>A function type for creating a <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function type is used to create a <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref> and creates a registered FieldType</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>The database to create the <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref> in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/fieldCollection.hpp" line="197" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/fieldCollection.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1aa28b3bbdd7029c7f50d99904f77672d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::finiteVolume::cellCentred::validateFieldDoc</definition>
        <argsstring>(const Document &amp;doc)</argsstring>
        <name>validateFieldDoc</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::validateFieldDoc</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Validates a <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function validates a <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FieldDocument" kindref="compound">FieldDocument</ref> by checking if it contains the required fields.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> to validate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/fieldCollection.hpp" line="26" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/fieldCollection.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a50930809b12b4cfd9bd30386e600d82b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FieldType</type>
          </param>
        </templateparamlist>
        <type>FieldType &amp;</type>
        <definition>FieldType &amp; NeoN::finiteVolume::cellCentred::oldTime</definition>
        <argsstring>(FieldType &amp;field)</argsstring>
        <name>oldTime</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::oldTime</qualifiedname>
        <param>
          <type>FieldType &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Retrieves the old time field of a given field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the old time field of a given field</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to retrieve the old time field from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old time field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/oldTimeCollection.hpp" line="147" column="11" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/oldTimeCollection.hpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a0057feb1130fc5dd83957411e3fe4d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FieldType</type>
          </param>
        </templateparamlist>
        <type>const FieldType &amp;</type>
        <definition>const FieldType &amp; NeoN::finiteVolume::cellCentred::oldTime</definition>
        <argsstring>(const FieldType &amp;field)</argsstring>
        <name>oldTime</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::oldTime</qualifiedname>
        <param>
          <type>const FieldType &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Retrieves the old time field of a given field (const version). </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the old time field of a given field</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to retrieve the old time field from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old time field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/oldTimeCollection.hpp" line="163" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/oldTimeCollection.hpp" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1ab44133b0ea6f88a630870f2574ec7813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">NeoN::scalar</ref></type>
        <definition>NeoN::scalar NeoN::finiteVolume::cellCentred::computeCoNum</definition>
        <argsstring>(const SurfaceField&lt; NeoN::scalar &gt; &amp;faceFlux, const scalar dt)</argsstring>
        <name>computeCoNum</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeCoNum</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">NeoN::scalar</ref> &gt; &amp;</type>
          <declname>faceFlux</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/auxiliary/coNum.hpp" line="22" column="14" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/auxiliary/coNum.hpp" declline="22" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1ab918b7425253d07393f1e18b71aa4e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BoundaryType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; BoundaryType &gt;</type>
        <definition>std::vector&lt; BoundaryType &gt; NeoN::finiteVolume::cellCentred::createCalculatedBCs</definition>
        <argsstring>(const UnstructuredMesh &amp;mesh)</argsstring>
        <name>createCalculatedBCs</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::createCalculatedBCs</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary.hpp" line="27" column="13" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary.hpp" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1ac219f7675251df9d46327915c48c74e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BoundaryType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; BoundaryType &gt;</type>
        <definition>std::vector&lt; BoundaryType &gt; NeoN::finiteVolume::cellCentred::createExtrapolatedBCs</definition>
        <argsstring>(const UnstructuredMesh &amp;mesh)</argsstring>
        <name>createExtrapolatedBCs</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::createExtrapolatedBCs</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary.hpp" line="39" column="13" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary.hpp" bodystart="39" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a3b18e10c3ac36a283a8dfccc0afd70ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename IndexType</type>
            <defval>localIdx</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt;</type>
        <definition>VolumeField&lt; ValueType &gt; NeoN::finiteVolume::cellCentred::operator&amp;</definition>
        <argsstring>(const Expression&lt; ValueType, IndexType &gt; expr, const VolumeField&lt; ValueType &gt; &amp;psi)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType, IndexType &gt;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>psi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/dsl/expression.hpp" line="189" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/dsl/expression.hpp" bodystart="189" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a2af6e10aa4688072ff01443f11664b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeFaceNormalGrad</definition>
        <argsstring>(const VolumeField&lt; ValueType &gt; &amp;volField, const std::shared_ptr&lt; GeometryScheme &gt; geometryScheme, SurfaceField&lt; ValueType &gt; &amp;surfaceField)</argsstring>
        <name>computeFaceNormalGrad</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeFaceNormalGrad</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>volField</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1GeometryScheme" kindref="compound">GeometryScheme</ref> &gt;</type>
          <declname>geometryScheme</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>surfaceField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/faceNormalGradient/uncorrected.hpp" line="21" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/faceNormalGradient/uncorrected.hpp" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a5ee2b2f0634716198d36459918063de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeLinearInterpolation</definition>
        <argsstring>(const VolumeField&lt; ValueType &gt; &amp;src, const SurfaceField&lt; scalar &gt; &amp;weights, SurfaceField&lt; ValueType &gt; &amp;dst)</argsstring>
        <name>computeLinearInterpolation</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeLinearInterpolation</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/interpolation/linear.hpp" line="31" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/interpolation/linear.hpp" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1aa9d7a25056cb046afef32003276efb73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeUpwindInterpolation</definition>
        <argsstring>(const VolumeField&lt; ValueType &gt; &amp;src, const SurfaceField&lt; scalar &gt; &amp;flux, const SurfaceField&lt; scalar &gt; &amp;weights, SurfaceField&lt; ValueType &gt; &amp;dst)</argsstring>
        <name>computeUpwindInterpolation</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeUpwindInterpolation</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/interpolation/upwind.hpp" line="31" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/interpolation/upwind.hpp" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a86893f40ebb8325a95a54b9aaa299e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeDivExp</definition>
        <argsstring>(const SurfaceField&lt; scalar &gt; &amp;faceFlux, const VolumeField&lt; ValueType &gt; &amp;phi, const SurfaceInterpolation&lt; ValueType &gt; &amp;surfInterp, Field&lt; ValueType &gt; &amp;divPhi, const dsl::Coeff operatorScaling)</argsstring>
        <name>computeDivExp</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeDivExp</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>faceFlux</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceInterpolation" kindref="compound">SurfaceInterpolation</ref>&lt; ValueType &gt; &amp;</type>
          <declname>surfInterp</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>divPhi</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">dsl::Coeff</ref></type>
          <declname>operatorScaling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenDiv.hpp" line="17" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenDiv.hpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a7a3a44ea47cbf3acf755e508dfe9b504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeDivImp</definition>
        <argsstring>(la::LinearSystem&lt; ValueType, localIdx &gt; &amp;ls, const SurfaceField&lt; scalar &gt; &amp;faceFlux, const VolumeField&lt; ValueType &gt; &amp;phi, const dsl::Coeff operatorScaling, const SparsityPattern &amp;sparsityPattern)</argsstring>
        <name>computeDivImp</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeDivImp</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1la_1_1LinearSystem" kindref="compound">la::LinearSystem</ref>&lt; ValueType, <ref refid="namespaceNeoN_1af0b7553899fd421d905a302d61334be3" kindref="member">localIdx</ref> &gt; &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>faceFlux</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">dsl::Coeff</ref></type>
          <declname>operatorScaling</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SparsityPattern" kindref="compound">SparsityPattern</ref> &amp;</type>
          <declname>sparsityPattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenDiv.hpp" line="26" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenDiv.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a93779b3e2e5c0a8e46582bd319627a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeLaplacianExp</definition>
        <argsstring>(const FaceNormalGradient&lt; ValueType &gt; &amp;, const SurfaceField&lt; scalar &gt; &amp;, VolumeField&lt; ValueType &gt; &amp;, Field&lt; ValueType &gt; &amp;, const dsl::Coeff)</argsstring>
        <name>computeLaplacianExp</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeLaplacianExp</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FaceNormalGradient" kindref="compound">FaceNormalGradient</ref>&lt; ValueType &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">dsl::Coeff</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenLaplacian.hpp" line="18" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenLaplacian.hpp" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1afc86f464f7d3c93f86ff78d55658a7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::computeLaplacianImpl</definition>
        <argsstring>(la::LinearSystem&lt; ValueType, localIdx &gt; &amp;ls, const SurfaceField&lt; scalar &gt; &amp;gamma, VolumeField&lt; ValueType &gt; &amp;phi, const dsl::Coeff operatorScaling, const SparsityPattern &amp;sparsityPattern, const FaceNormalGradient&lt; ValueType &gt; &amp;faceNormalGradient)</argsstring>
        <name>computeLaplacianImpl</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::computeLaplacianImpl</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1la_1_1LinearSystem" kindref="compound">la::LinearSystem</ref>&lt; ValueType, <ref refid="namespaceNeoN_1af0b7553899fd421d905a302d61334be3" kindref="member">localIdx</ref> &gt; &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceField" kindref="compound">SurfaceField</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeField" kindref="compound">VolumeField</ref>&lt; ValueType &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">dsl::Coeff</ref></type>
          <declname>operatorScaling</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SparsityPattern" kindref="compound">SparsityPattern</ref> &amp;</type>
          <declname>sparsityPattern</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1FaceNormalGradient" kindref="compound">FaceNormalGradient</ref>&lt; ValueType &gt; &amp;</type>
          <declname>faceNormalGradient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenLaplacian.hpp" line="27" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/gaussGreenLaplacian.hpp" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1finiteVolume_1_1cellCentred_1a81c00c791b2dae69945e85af9028f657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::surfaceIntegrate</definition>
        <argsstring>(const Executor &amp;exec, size_t nInternalFaces, View&lt; const int &gt; neighbour, View&lt; const int &gt; owner, View&lt; const int &gt; faceCells, View&lt; const ValueType &gt; flux, View&lt; const scalar &gt; v, View&lt; ValueType &gt; res, const dsl::Coeff operatorScaling)</argsstring>
        <name>surfaceIntegrate</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceIntegrate</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>nInternalFaces</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const int &gt;</type>
          <declname>neighbour</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const int &gt;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const int &gt;</type>
          <declname>faceCells</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">dsl::Coeff</ref></type>
          <declname>operatorScaling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/surfaceIntegrate.hpp" line="18" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/operators/surfaceIntegrate.hpp" declline="18" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/fieldCollection.hpp" line="16" column="1"/>
  </compounddef>
</doxygen>
