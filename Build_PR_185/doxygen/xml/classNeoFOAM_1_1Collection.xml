<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1Collection" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::Collection</compoundname>
    <includes refid="collection_8hpp" local="no">collection.hpp</includes>
    <innerclass refid="structNeoFOAM_1_1Collection_1_1CollectionConcept" prot="private">NeoFOAM::Collection::CollectionConcept</innerclass>
    <innerclass refid="structNeoFOAM_1_1Collection_1_1CollectionModel" prot="private">NeoFOAM::Collection::CollectionModel</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1Collection_1ab955231e95c20618f66d8721c56e91dd" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; CollectionConcept &gt;</type>
        <definition>std::unique_ptr&lt;CollectionConcept&gt; NeoFOAM::Collection::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="195" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1aef5789130cba52804ceb6e17e99f3b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>NeoFOAM::Collection::Collection</definition>
        <argsstring>(CollectionType collection)</argsstring>
        <name>Collection</name>
        <param>
          <type>CollectionType</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> from a specific collection type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the collection to be wrapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>collection</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection instance to be wrapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="38" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a3ba16f2893c8bacc3000d8f0e41e97c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Collection::Collection</definition>
        <argsstring>(const Collection &amp;other)</argsstring>
        <name>Collection</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> instance to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="46" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a6d094573e33e3916b1e5d1e532c22867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>Document&amp; NeoFOAM::Collection::doc</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>doc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>&amp; A reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="54" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a4b58f0b8dccb02bbdfb073b457f21dc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>const Document&amp; NeoFOAM::Collection::doc</definition>
        <argsstring>(const std::string &amp;id) const</argsstring>
        <name>doc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref>&amp; A const reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="62" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a43b3a76cbc46e7fe74e58c87a071822f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; NeoFOAM::Collection::find</definition>
        <argsstring>(const std::function&lt; bool(const Document &amp;)&gt; &amp;predicate) const</argsstring>
        <name>find</name>
        <param>
          <type>const std::function&lt; bool(const <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> &amp;)&gt; &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Finds documents that match a given predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that takes a <ref refid="classNeoFOAM_1_1Document" kindref="compound">Document</ref> and returns true if it matches the criteria. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; A vector of document IDs that match the predicate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="71" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1ace992665d5d8857c9e006bc5e5f5685f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
        <definition>size_t NeoFOAM::Collection::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of documents in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The number of documents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="78" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a5b04e0171c278266539ba62083356d63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoFOAM::Collection::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns the type of the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The type of the collection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="85" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a9765086f7012a9353305bcfb41fb16a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoFOAM::Collection::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>Returns the name of the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The name of the collection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="92" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a2b3a2e07cc5ce35ddd2409a57f5e6d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Database" kindref="compound">Database</ref> &amp;</type>
        <definition>Database&amp; NeoFOAM::Collection::db</definition>
        <argsstring>()</argsstring>
        <name>db</name>
        <briefdescription>
<para>Returns a reference to the database containing the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoFOAM_1_1Database" kindref="compound">Database</ref>&amp; A reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="99" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1aa8ecac4a22a3d786c5a2c869a0257976" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoFOAM_1_1Database" kindref="compound">Database</ref> &amp;</type>
        <definition>const Database&amp; NeoFOAM::Collection::db</definition>
        <argsstring>() const</argsstring>
        <name>db</name>
        <briefdescription>
<para>Returns a const reference to the database containing the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classNeoFOAM_1_1Database" kindref="compound">Database</ref>&amp; A const reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="106" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1ae591297ee9ae955c730725acb92f02f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type>CollectionType &amp;</type>
        <definition>CollectionType&amp; NeoFOAM::Collection::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <briefdescription>
<para>Casts the collection to a specific collection type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CollectionType&amp; A reference to the casted collection. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_cast</parametername>
</parameternamelist>
<parameterdescription>
<para>if the cast fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="116" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Collection_1a8bee15393688f73272e2a07b339c9c55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type>const CollectionType &amp;</type>
        <definition>const CollectionType&amp; NeoFOAM::Collection::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
<para>Casts the collection to a specific collection type (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const CollectionType&amp; A const reference to the casted collection. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_cast</parametername>
</parameternamelist>
<parameterdescription>
<para>if the cast fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="135" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" bodystart="135" bodyend="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A type-erased interface collection types. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> class provides a type-erased interface for different collection types. It allows operations such as retrieving documents, finding documents based on predicates, and accessing collection metadata. </para>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" line="27" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/collection.hpp" bodystart="28" bodyend="196"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1Collection_1ae591297ee9ae955c730725acb92f02f4" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>as</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a8bee15393688f73272e2a07b339c9c55" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>as</name></member>
      <member refid="classNeoFOAM_1_1Collection_1aef5789130cba52804ceb6e17e99f3b88" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>Collection</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a3ba16f2893c8bacc3000d8f0e41e97c8" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>Collection</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a2b3a2e07cc5ce35ddd2409a57f5e6d1a" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>db</name></member>
      <member refid="classNeoFOAM_1_1Collection_1aa8ecac4a22a3d786c5a2c869a0257976" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>db</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a6d094573e33e3916b1e5d1e532c22867" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>doc</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a4b58f0b8dccb02bbdfb073b457f21dc6" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>doc</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a43b3a76cbc46e7fe74e58c87a071822f" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>find</name></member>
      <member refid="classNeoFOAM_1_1Collection_1ab955231e95c20618f66d8721c56e91dd" prot="private" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>impl_</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a9765086f7012a9353305bcfb41fb16a5" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>name</name></member>
      <member refid="classNeoFOAM_1_1Collection_1ace992665d5d8857c9e006bc5e5f5685f" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>size</name></member>
      <member refid="classNeoFOAM_1_1Collection_1a5b04e0171c278266539ba62083356d63" prot="public" virt="non-virtual"><scope>NeoFOAM::Collection</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
