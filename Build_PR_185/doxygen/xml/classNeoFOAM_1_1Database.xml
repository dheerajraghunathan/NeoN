<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1Database" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::Database</compoundname>
    <includes refid="database_8hpp" local="no">database.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1Database_1a057a04bd318633bf6a6c241dce28204b" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &gt;</type>
        <definition>std::unordered_map&lt;std::string, Collection&gt; NeoFOAM::Database::collections_</definition>
        <argsstring></argsstring>
        <name>collections_</name>
        <briefdescription>
<para>A map that associates collection names with their corresponding <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para>This unordered map uses strings as keys to represent the names of the collections, and the values are <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> objects </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="107" column="24" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1a87ede011dfba29c1fb72dc1e8378ec21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
        <definition>Collection&amp; NeoFOAM::Database::insert</definition>
        <argsstring>(const std::string &amp;key, const Collection &amp;col)</argsstring>
        <name>insert</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Inserts a collection into the database with the specified key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key associated with the collection to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection to be inserted into the database. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref>&amp; A reference to the inserted collection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="27" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1a5ded824cc3cfa87e4060f9653ca7a556" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::Database::contains</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Checks if the database contains an collection with the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection to check for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the collection exists in the database, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="35" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1af2e73bee587ccfa01699fcc0bf5929f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::Database::remove</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes a collection from the database. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes the collection with the specified name from the database.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the collection was successfully removed, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="45" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1ad13abcd5302ae36c13cb5d50b07ee9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
        <definition>Collection&amp; NeoFOAM::Database::at</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>at</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieves a collection by its name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for and returns a reference to a collection identified by the given name. If the collection does not exist, the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref>&amp; A reference to the collection with the specified name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="57" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1a2871e95bfad2459c7708379cbc1567c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
        <definition>const Collection&amp; NeoFOAM::Database::at</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>at</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieves a collection by its name (const version). </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for and returns a const reference to a collection identified by the given name. If the collection does not exist, the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref>&amp; A const reference to the collection with the specified name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="69" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1a9904df0e70cfd39479b2824978bfb8f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
            <defval><ref refid="classNeoFOAM_1_1Collection" kindref="compound">Collection</ref></defval>
          </param>
        </templateparamlist>
        <type>CollectionType &amp;</type>
        <definition>CollectionType&amp; NeoFOAM::Database::at</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>at</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieves a collection by its name and casts it to the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves a collection by its name and attempts to cast it to the specified type. If the collection does not exist or the cast fails, an exception is thrown.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the collection to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CollectionType&amp; A reference to the collection cast to the specified type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="82" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Database_1a478e7af1e43d256014625364e83dcf4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t NeoFOAM::Database::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the database. </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides the number of elements currently stored in the database.</para>
<para><simplesect kind="return"><para>std::size_t The number of elements in the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="96" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/database/database.hpp" bodystart="17" bodyend="108"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1Database_1ad13abcd5302ae36c13cb5d50b07ee9d9" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>at</name></member>
      <member refid="classNeoFOAM_1_1Database_1a2871e95bfad2459c7708379cbc1567c2" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>at</name></member>
      <member refid="classNeoFOAM_1_1Database_1a9904df0e70cfd39479b2824978bfb8f3" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>at</name></member>
      <member refid="classNeoFOAM_1_1Database_1a057a04bd318633bf6a6c241dce28204b" prot="private" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>collections_</name></member>
      <member refid="classNeoFOAM_1_1Database_1a5ded824cc3cfa87e4060f9653ca7a556" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>contains</name></member>
      <member refid="classNeoFOAM_1_1Database_1a87ede011dfba29c1fb72dc1e8378ec21" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>insert</name></member>
      <member refid="classNeoFOAM_1_1Database_1af2e73bee587ccfa01699fcc0bf5929f9" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>remove</name></member>
      <member refid="classNeoFOAM_1_1Database_1a478e7af1e43d256014625364e83dcf4d" prot="public" virt="non-virtual"><scope>NeoFOAM::Database</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
