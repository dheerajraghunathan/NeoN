name: NeoN + FoamAdapter LRZ GitLab CI

on:
  push:
    branches: [dev, main]
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  trigger-lrz-ci:
    name: Trigger NeoN + FoamAdapter CI on GPU
    runs-on: ubuntu-latest
    timeout-minutes: 1440

    if: "!contains(toJson(github.event.pull_request.labels.*.name), 'Skip-build')"

    env:
      LRZ_GROUP: greole
      LRZ_HOST: gitlab-ce.lrz.de
      REPO_NAME: ${{ github.event.repository.name }}
      FOAMADAPTER_REPO: FoamAdapter
      MAX_WAIT_MINUTES: 1440  # 24 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch
        id: branch
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request"* ]]; then
            BRANCH="$GITHUB_HEAD_REF"
          else
            BRANCH=${GITHUB_REF_NAME#refs/heads/}
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Push commit to NeoN LRZ GitLab
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add lrz https://oauth2:${{ secrets.GITLAB_PROJECT_TOKEN }}@${{ env.LRZ_HOST }}/${{ env.LRZ_GROUP }}/${{ env.REPO_NAME }}.git
          git fetch origin ${{ steps.branch.outputs.branch }}
          git checkout -B ${{ steps.branch.outputs.branch }} origin/${{ steps.branch.outputs.branch }}
          git reset --hard origin/${{ steps.branch.outputs.branch }}
          git push --force lrz HEAD:refs/heads/${{ steps.branch.outputs.branch }}

      - name: Cancel running/pending NeoN LRZ CI pipelines
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          response=$(curl -s -w "%{http_code}" -o response.json \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines?ref=$BRANCH&order_by=id&sort=desc")
          http_code="${response:(-3)}"
          if [[ "$http_code" != "200" ]]; then cat response.json; exit 1; fi
          pipeline_ids=$(jq -r '.[] | select(.status=="running" or .status=="pending") | .id' response.json)
          for id in $pipeline_ids; do
            curl -s --request POST \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
              "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines/$id/cancel"
          done

      - name: Trigger NeoN LRZ GitLab CI pipeline
        id: trigger-neon
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          response=$(curl -s --request POST \
            --form "token=${{ secrets.LRZ_GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$BRANCH" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/trigger/pipeline")
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then exit 1; fi
          # echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

          echo "$response" | jq .
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then exit 1; fi
          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

            # --form "variables[GITHUB_SHA]=$GITHUB_SHA" \

      - name: Wait for NeoN LRZ GitLab CI pipeline
        run: |
          .github/scripts/wait_pipeline.sh \
            "${{ env.REPO_NAME }}" \
            "${{ steps.trigger-neon.outputs.pipeline_id }}" \
            "${{ secrets.GITLAB_PROJECT_TOKEN }}"

      - name: Trigger FoamAdapter LRZ GitLab CI pipeline
        id: trigger-foam
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          echo "Triggering new pipeline on branch $BRANCH"

          response=$(curl -s --request POST \
            --form "token=${{ secrets.FOAMADAPTER_LRZ_GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$BRANCH" \
            --form "variables[NEON_BRANCH]=$BRANCH" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.FOAMADAPTER_REPO }}/trigger/pipeline")

          echo "$response" | jq .
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then exit 1; fi
          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

      - name: Wait for FoamAdapter LRZ GitLab CI pipeline
        run: |
          .github/scripts/wait_pipeline.sh \
            "${{ env.FOAMADAPTER_REPO }}" \
            "${{ steps.trigger-foam.outputs.pipeline_id }}" \
            "${{ secrets.FOAMADAPTER_LRZ_GITLAB_PROJECT_TOKEN }}"
