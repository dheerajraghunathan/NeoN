name: NeoN + FoamAdapter LRZ GitLab CI

on:
  push:
    branches: [dev, main]
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  trigger-lrz-ci:
    name: Trigger NeoN + FoamAdapter CI on GPU
    runs-on: ubuntu-latest
    timeout-minutes: 1440

    if: "!contains(toJson(github.event.pull_request.labels.*.name), 'Skip-build')"

    env:
      LRZ_GROUP: greole
      LRZ_HOST: gitlab-ce.lrz.de
      REPO_NAME: ${{ github.event.repository.name }}
      FOAMADAPTER_REPO: FoamAdapter
      MAX_WAIT_MINUTES: 1440  # 24 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch
        id: branch
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request"* ]]; then
            BRANCH="$GITHUB_HEAD_REF"
          else
            BRANCH=${GITHUB_REF_NAME#refs/heads/}
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Push commit to NeoN LRZ GitLab
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add lrz https://oauth2:${{ secrets.GITLAB_PROJECT_TOKEN }}@${{ env.LRZ_HOST }}/${{ env.LRZ_GROUP }}/${{ env.REPO_NAME }}.git
          git fetch origin ${{ steps.branch.outputs.branch }}
          git checkout -B ${{ steps.branch.outputs.branch }} origin/${{ steps.branch.outputs.branch }}
          git reset --hard origin/${{ steps.branch.outputs.branch }}
          git push --force lrz HEAD:refs/heads/${{ steps.branch.outputs.branch }}

      - name: Cancel running/pending NeoN LRZ CI pipelines
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          response=$(curl -s -w "%{http_code}" -o response.json \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines?ref=$BRANCH&order_by=id&sort=desc")
          http_code="${response:(-3)}"
          if [[ "$http_code" != "200" ]]; then cat response.json; exit 1; fi
          pipeline_ids=$(jq -r '.[] | select(.status=="running" or .status=="pending") | .id' response.json)
          for id in $pipeline_ids; do
            curl -s --request POST \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
              "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines/$id/cancel"
          done

      - name: Trigger NeoN LRZ CI pipeline
        id: trigger-neon
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          response=$(curl -s --request POST \
            --form "token=${{ secrets.LRZ_GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$BRANCH" \
            --form "variables[GITHUB_SHA]=$GITHUB_SHA" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/trigger/pipeline")
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then exit 1; fi
          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

      # - name: Wait for NeoN CI pipeline
      #   id: wait-neon
      #   run: |
      #     wait_pipeline() {
      #       local PROJECT=$1
      #       local PIPELINE_ID=$2
      #       for i in $(seq 1 $MAX_WAIT_MINUTES); do
      #         status=$(curl -s \
      #           --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
      #           "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${PROJECT}/pipelines/$PIPELINE_ID" \
      #           | jq -r '.status')
      #         echo "[$i] $PROJECT pipeline status: $status"
      #         case "$status" in
      #           success) return 0 ;;
      #           failed|canceled|skipped) return 1 ;;
      #         esac
      #         sleep 60
      #       done
      #       return 1
      #     }

      #     wait_pipeline "${{ env.REPO_NAME }}" "${{ steps.trigger-neon.outputs.pipeline_id }}"

      - name: Trigger FoamAdapter LRZ CI pipeline
        if: success()
        id: trigger-foam
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}

          # URL-encode the branch name (handles slashes and special chars)
          ENCODED_BRANCH=$(python3 -c "import urllib.parse,os; print(urllib.parse.quote(os.environ['BRANCH'], safe=''))" BRANCH="$BRANCH")

          echo "Checking FoamAdapter branch: $BRANCH (encoded: $ENCODED_BRANCH)"

          # Check if FoamAdapter branch exists
          FOAMADAPTER_BRANCH=$(curl -s --header "PRIVATE-TOKEN: ${{ secrets.FOAMADAPTER_LRZ_GITLAB_PROJECT_TOKEN }}" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.FOAMADAPTER_REPO }}/repository/branches/$ENCODED_BRANCH" \
            | jq -r '.name // empty')

          # Fallback to main if branch does not exist
          FOAMADAPTER_BRANCH=${FOAMADAPTER_BRANCH:-main}

          echo "Use FoamAdapter branch: $FOAMADAPTER_BRANCH"
          echo "foamadapter-branch=$FOAMADAPTER_BRANCH" >> $GITHUB_OUTPUT

          response=$(curl -s --request POST \
            --form "token=${{ secrets.FOAMADAPTER_LRZ_GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$FOAMADAPTER_BRANCH" \
            --form "variables[NEON_BRANCH]=$BRANCH" \
            --form "variables[NEON_COMMIT]=$GITHUB_SHA" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.FOAMADAPTER_REPO }}/trigger/pipeline")

          echo "$response" | jq .
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then exit 1; fi
          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT


      - name: Wait for FoamAdapter CI pipeline
        if: success()
        run: |
          wait_pipeline() {
            local PROJECT=$1
            local PIPELINE_ID=$2
            for i in $(seq 1 $MAX_WAIT_MINUTES); do
              status=$(curl -s \
                --header "PRIVATE-TOKEN: ${{ secrets.FOAMADAPTER_LRZ_GITLAB_PROJECT_TOKEN }}" \
                "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.FOAMADAPTER_REPO }}/pipelines/$PIPELINE_ID" \
                | jq -r '.status')
              echo "[$i] $PROJECT pipeline status: $status"
              case "$status" in
               success) return 0 ;;
                failed|canceled|skipped) return 1 ;;
              esac
              sleep 60
            done
            return 1
          }

          wait_pipeline "${{ env.FOAMADAPTER_REPO }}" "${{ steps.trigger-foam.outputs.pipeline_id }}"
