<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1Span" kind="class" language="C++" prot="public">
    <compoundname>NeoN::Span</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::span&lt; ValueType &gt;</basecompoundref>
    <includes refid="span_8hpp" local="no">span.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classNeoN_1_1Span_1aa4a1bf0902e9193005eacda8c275d28a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NeoN::Span&lt; ValueType &gt;::abort</definition>
        <argsstring></argsstring>
        <name>abort</name>
        <qualifiedname>NeoN::Span::abort</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" line="28" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Span_1a505b31040099d2b6100241ac87420065" prot="public" static="no" mutable="yes">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::Span&lt; ValueType &gt;::failureIndex</definition>
        <argsstring></argsstring>
        <name>failureIndex</name>
        <qualifiedname>NeoN::Span::failureIndex</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" line="34" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1Span_1a501eb822311050855eb4b9e4286135df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Span&lt; ValueType &gt;::Span</definition>
        <argsstring>(std::span&lt; ValueType &gt; in)</argsstring>
        <name>Span</name>
        <qualifiedname>NeoN::Span::Span</qualifiedname>
        <param>
          <type>std::span&lt; ValueType &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" line="40" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Span_1abeae5b3b7205c905a76067a38daa1abf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr ValueType &amp;</type>
        <definition>constexpr ValueType &amp; NeoN::Span&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(std::size_t index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::Span::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" line="42" column="25" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" bodystart="42" bodyend="67"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>NeoN::Span&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1Span"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::span&lt; ValueType &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>NeoN::Span&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1Span"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::span&lt; ValueType &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" line="21" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/span.hpp" bodystart="22" bodyend="68"/>
    <listofallmembers>
      <member refid="classNeoN_1_1Span_1aa4a1bf0902e9193005eacda8c275d28a" prot="public" virt="non-virtual"><scope>NeoN::Span</scope><name>abort</name></member>
      <member refid="classNeoN_1_1Span_1a505b31040099d2b6100241ac87420065" prot="public" virt="non-virtual"><scope>NeoN::Span</scope><name>failureIndex</name></member>
      <member refid="classNeoN_1_1Span_1abeae5b3b7205c905a76067a38daa1abf" prot="public" virt="non-virtual"><scope>NeoN::Span</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1Span_1a501eb822311050855eb4b9e4286135df" prot="public" virt="non-virtual"><scope>NeoN::Span</scope><name>Span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
