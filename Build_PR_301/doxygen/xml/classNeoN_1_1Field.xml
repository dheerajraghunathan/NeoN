<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>NeoN::Field</compoundname>
    <includes refid="field_8hpp" local="no">field.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classNeoN_1_1Field_1ab2e145b5175e2704ea3e591c50c6c080" prot="public" static="no">
        <type>ValueType</type>
        <definition>using NeoN::Field&lt; ValueType &gt;::FieldValueType =  ValueType</definition>
        <argsstring></argsstring>
        <name>FieldValueType</name>
        <qualifiedname>NeoN::Field::FieldValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="53" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1Field_1a326ed89dd1ce0415ebd3996bd90e9f58" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::Field&lt; ValueType &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>NeoN::Field::size_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Size of the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="419" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Field_1a6b7ca3e2f77ca592f49febc400fdbb2c" prot="private" static="no" mutable="no">
        <type>ValueType *</type>
        <definition>ValueType* NeoN::Field&lt; ValueType &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>NeoN::Field::data_</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to the field data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="420" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Field_1acbf15a9c1de47341cf9d4b94aa35dafb" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
        <definition>const Executor NeoN::Field&lt; ValueType &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <qualifiedname>NeoN::Field::exec_</qualifiedname>
        <briefdescription>
<para>Executor associated with the field. (CPU, GPU, openMP, etc.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="421" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="421" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1Field_1a7c28120ccf66b74b5a25b68642ff24e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create an uninitialized <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="60" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="60" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ae238be0c8e7775f96ccc261ade78c7e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const ValueType *in, size_t size, Executor hostExec=SerialExecutor())</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>hostExec</declname>
          <defval><ref refid="classNeoN_1_1SerialExecutor" kindref="compound">SerialExecutor</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> with a given size from existing memory on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to existing data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostExec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor where the original data is located </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="78" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="78" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5667757f225d35a5ee7599ff940b104f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size, ValueType value)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> with a given size on an executor and uniform value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="99" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ab6bfd78ef993eaf6e1b581b5892ac1f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, std::vector&lt; ValueType &gt; in)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> from a given vector of values on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="115" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1af2ab06f66259793f1159a420b29b08e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const Field&lt; ValueType &gt; &amp;in)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> as a copy of a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> on a specified executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="122" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aa6c497ad1df119d4790c1f8c9fb1ce1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor, creates a new field with the same size and data as the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="130" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a284fe3df2fd78b59c9b566d1c6d1d257" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves the data from the parsed field to the new field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to move from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="136" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aecc5525565aa7fa1ac797b31b2f35f21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::~Field</definition>
        <argsstring>()</argsstring>
        <name>~Field</name>
        <qualifiedname>NeoN::Field::~Field</qualifiedname>
        <briefdescription>
<para>Destroy the <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="145" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aa6daaf16f60c99fddb0043adf9e465ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::apply</definition>
        <argsstring>(func f)</argsstring>
        <name>apply</name>
        <qualifiedname>NeoN::Field::apply</qualifiedname>
        <param>
          <type>func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>applies a functor, transformation, to the field </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to map over the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Ideally the f should be a KOKKOS_LAMBA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="157" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aa7ce196b5c516a6a922df9e1c42cfc17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::copyToExecutor</definition>
        <argsstring>(Executor dstExec) const</argsstring>
        <name>copyToExecutor</name>
        <qualifiedname>NeoN::Field::copyToExecutor</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>dstExec</declname>
        </param>
        <briefdescription>
<para>Copies the data to a new field on a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstExec</parametername>
</parameternamelist>
<parameterdescription>
<para>The executor on which the data should be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="167" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a22f7f1470881b09258e3555147001a45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>() const</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoN::Field::copyToHost</qualifiedname>
        <briefdescription>
<para>Returns a copy of the field back to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="181" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a03d4a236bc9e7403a5db584a0df204fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;result)</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoN::Field::copyToHost</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies the data (from anywhere) to a parsed host field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The field into which the data must be copied. Must be sized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>exits if the size of the result field is not the same as the source field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="191" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="191" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a08fadda2d3e40413b6f05ac389f8bbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType &amp; NeoN::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i)=delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::Field::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="200" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5505215318304d16df709f7f67b75345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ValueType &amp;</type>
        <definition>const ValueType &amp; NeoN::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i) const =delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::Field::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="203" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a0d12d0036963745d002440a49eb2f08b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const ValueType &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Field::operator=</qualifiedname>
        <param>
          <type>const ValueType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the passed value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="209" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5e04587ceae6b2f6279f97ded6d1b0f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Field::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This field will be sized to the size of the parsed field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="217" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="217" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1acb5f13fa3089b115f0181cd0566346f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator+=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>NeoN::Field::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="232" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1af9cf2de9ce188e24c15c36d4a3349dba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator-=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>NeoN::Field::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="244" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a12c0e7ee4f793bcbe31a078b28388186" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::Field::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiply by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiply. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="256" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="256" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a9daef24028615af74239098853172024" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::Field::operator*</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies every cell in the field by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="271" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a11e385c579b8b6a9ecb5974962651499" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator*=</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>NeoN::Field::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies this field by another field element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to multiply with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the element-wise multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="284" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="284" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a682a914a4820ba076d57212fd9a9727e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator*=</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>NeoN::Field::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply-assignment operator, multiplies every cell in the field by a scalar and updates the field in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="297" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a81cf1a0dadaead971854aef16f7a695e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::resize</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>resize</name>
        <qualifiedname>NeoN::Field::resize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resizes the field to a new size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="308" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="308" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aa201922d18563a3dbc561c41f9409a73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType *</type>
        <definition>ValueType * NeoN::Field&lt; ValueType &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <qualifiedname>NeoN::Field::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="334" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ad877d31d06fa1a89213f519f3ff6a0bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ValueType *</type>
        <definition>const ValueType * NeoN::Field&lt; ValueType &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>NeoN::Field::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="340" column="22" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1abd0575e5cec90d4f66844df33f5dfd90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor &amp; NeoN::Field&lt; ValueType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <qualifiedname>NeoN::Field::exec</qualifiedname>
        <briefdescription>
<para>Gets the executor associated with the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="346" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a31520d9f7113a47aa433317f56f2645c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::Field&lt; ValueType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoN::Field::size</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="352" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ad804357f953a5678b57453c6bbb94d53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1afa6c1c30776d4f6ed4691b0f9d1ea416" kindref="member">label</ref></type>
        <definition>label NeoN::Field&lt; ValueType &gt;::ssize</definition>
        <argsstring>() const</argsstring>
        <name>ssize</name>
        <qualifiedname>NeoN::Field::ssize</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="358" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a2c37b938861d6fe80f1157e8636ff28f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::Field&lt; ValueType &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>NeoN::Field::empty</qualifiedname>
        <briefdescription>
<para>Checks if the field is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the field is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="364" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aecca8888c63929dd3bd03e1af44c455a" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="367" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a991771cb929c1ef39813934cc4403f66" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="370" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5ef9c4016e3f9b90c8012789cbbe0311" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="376" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a811039556aa49e7e2f2d49e4429e869c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="382" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5009dd483df9956e7430f2a845398d1d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref>, <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="388" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a49c7f6f42e94491a833d1d39797686ee" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref>, <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="391" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a88e5d7484019023422cd01b904e17d1e" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref>, <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="397" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1af23d62e47270a76431608be5984b3332" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Field&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Field::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref>, <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="406" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a01ef1e3eb36707eb7f04770c185fa368" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref>, <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; NeoN::Field&lt; ValueType &gt;::range</definition>
        <argsstring>() const</argsstring>
        <name>range</name>
        <qualifiedname>NeoN::Field::range</qualifiedname>
        <briefdescription>
<para>Gets the range of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The range of the field {0, <ref refid="classNeoN_1_1Field_1a31520d9f7113a47aa433317f56f2645c" kindref="member">size()</ref>}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="415" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="415" bodyend="415"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classNeoN_1_1Field_1a7e54b70ea59a6459df59069b5faa5da4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Field&lt; ValueType &gt;::validateOtherField</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs) const</argsstring>
        <name>validateOtherField</name>
        <qualifiedname>NeoN::Field::validateOtherField</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two fields are the same size and have the same executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="427" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="427" bodyend="431"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to contain the data and executors for a field and define some basic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" line="42" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoN/fields/field.hpp" bodystart="49" bodyend="432"/>
    <listofallmembers>
      <member refid="classNeoN_1_1Field_1aa6daaf16f60c99fddb0043adf9e465ef" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>apply</name></member>
      <member refid="classNeoN_1_1Field_1aa7ce196b5c516a6a922df9e1c42cfc17" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>copyToExecutor</name></member>
      <member refid="classNeoN_1_1Field_1a22f7f1470881b09258e3555147001a45" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoN_1_1Field_1a03d4a236bc9e7403a5db584a0df204fd" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoN_1_1Field_1aa201922d18563a3dbc561c41f9409a73" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>data</name></member>
      <member refid="classNeoN_1_1Field_1ad877d31d06fa1a89213f519f3ff6a0bc" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>data</name></member>
      <member refid="classNeoN_1_1Field_1a6b7ca3e2f77ca592f49febc400fdbb2c" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>data_</name></member>
      <member refid="classNeoN_1_1Field_1a2c37b938861d6fe80f1157e8636ff28f" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>empty</name></member>
      <member refid="classNeoN_1_1Field_1abd0575e5cec90d4f66844df33f5dfd90" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>exec</name></member>
      <member refid="classNeoN_1_1Field_1acbf15a9c1de47341cf9d4b94aa35dafb" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>exec_</name></member>
      <member refid="classNeoN_1_1Field_1a7c28120ccf66b74b5a25b68642ff24e6" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1ae238be0c8e7775f96ccc261ade78c7e7" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a5667757f225d35a5ee7599ff940b104f" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1ab6bfd78ef993eaf6e1b581b5892ac1f3" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1af2ab06f66259793f1159a420b29b08e6" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1aa6c497ad1df119d4790c1f8c9fb1ce1a" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a284fe3df2fd78b59c9b566d1c6d1d257" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1ab2e145b5175e2704ea3e591c50c6c080" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>FieldValueType</name></member>
      <member refid="classNeoN_1_1Field_1a12c0e7ee4f793bcbe31a078b28388186" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator*</name></member>
      <member refid="classNeoN_1_1Field_1a9daef24028615af74239098853172024" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator*</name></member>
      <member refid="classNeoN_1_1Field_1a11e385c579b8b6a9ecb5974962651499" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator*=</name></member>
      <member refid="classNeoN_1_1Field_1a682a914a4820ba076d57212fd9a9727e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator*=</name></member>
      <member refid="classNeoN_1_1Field_1acb5f13fa3089b115f0181cd0566346f5" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator+=</name></member>
      <member refid="classNeoN_1_1Field_1af9cf2de9ce188e24c15c36d4a3349dba" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator-=</name></member>
      <member refid="classNeoN_1_1Field_1a0d12d0036963745d002440a49eb2f08b" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Field_1a5e04587ceae6b2f6279f97ded6d1b0f8" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Field_1a08fadda2d3e40413b6f05ac389f8bbb0" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1Field_1a5505215318304d16df709f7f67b75345" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1Field_1a01ef1e3eb36707eb7f04770c185fa368" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>range</name></member>
      <member refid="classNeoN_1_1Field_1a81cf1a0dadaead971854aef16f7a695e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>resize</name></member>
      <member refid="classNeoN_1_1Field_1a31520d9f7113a47aa433317f56f2645c" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>size</name></member>
      <member refid="classNeoN_1_1Field_1a326ed89dd1ce0415ebd3996bd90e9f58" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>size_</name></member>
      <member refid="classNeoN_1_1Field_1ad804357f953a5678b57453c6bbb94d53" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>ssize</name></member>
      <member refid="classNeoN_1_1Field_1a7e54b70ea59a6459df59069b5faa5da4" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>validateOtherField</name></member>
      <member refid="classNeoN_1_1Field_1aecca8888c63929dd3bd03e1af44c455a" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a991771cb929c1ef39813934cc4403f66" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a5ef9c4016e3f9b90c8012789cbbe0311" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a811039556aa49e7e2f2d49e4429e869c" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a5009dd483df9956e7430f2a845398d1d" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a49c7f6f42e94491a833d1d39797686ee" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1a88e5d7484019023422cd01b904e17d1e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1af23d62e47270a76431608be5984b3332" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>view</name></member>
      <member refid="classNeoN_1_1Field_1aecc5525565aa7fa1ac797b31b2f35f21" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
