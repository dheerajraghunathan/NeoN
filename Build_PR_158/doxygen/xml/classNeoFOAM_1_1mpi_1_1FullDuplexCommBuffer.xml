<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::mpi::FullDuplexCommBuffer</compoundname>
    <includes refid="fullDuplexCommBuffer_8hpp" local="no">fullDuplexCommBuffer.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aa04a0b3012bbcda5ea58ee9118ad28c6" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoFOAM_1_1mpi_1_1HalfDuplexCommBuffer" kindref="compound">HalfDuplexCommBuffer</ref></type>
        <definition>HalfDuplexCommBuffer NeoFOAM::mpi::FullDuplexCommBuffer::send_</definition>
        <argsstring></argsstring>
        <name>send_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The send buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="149" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aecc8fb4922dde9a2e35fa0c75545975e" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoFOAM_1_1mpi_1_1HalfDuplexCommBuffer" kindref="compound">HalfDuplexCommBuffer</ref></type>
        <definition>HalfDuplexCommBuffer NeoFOAM::mpi::FullDuplexCommBuffer::receive_</definition>
        <argsstring></argsstring>
        <name>receive_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The receive buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="150" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a31210ad9752f89e9f9358ffc727eec0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::mpi::FullDuplexCommBuffer::FullDuplexCommBuffer</definition>
        <argsstring>()=default</argsstring>
        <name>FullDuplexCommBuffer</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a72b566a0a161548ba7742d740a8062bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::mpi::FullDuplexCommBuffer::FullDuplexCommBuffer</definition>
        <argsstring>(MPIEnvironment mpiEnviron, std::vector&lt; std::size_t &gt; sendSize, std::vector&lt; std::size_t &gt; receiveSize)</argsstring>
        <name>FullDuplexCommBuffer</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1mpi_1_1MPIEnvironment" kindref="compound">MPIEnvironment</ref></type>
          <declname>mpiEnviron</declname>
        </param>
        <param>
          <type>std::vector&lt; std::size_t &gt;</type>
          <declname>sendSize</declname>
        </param>
        <param>
          <type>std::vector&lt; std::size_t &gt;</type>
          <declname>receiveSize</declname>
        </param>
        <briefdescription>
<para>Constructor that initializes the send and receive buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>environ</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nodes, per rank, that this rank sends to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nodes, per rank, that this rank receives from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="41" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a180b6f7fbc497d5bc8b150d83a927719" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::mpi::FullDuplexCommBuffer::isCommInit</definition>
        <argsstring>() const</argsstring>
        <name>isCommInit</name>
        <briefdescription>
<para>Check if the communication buffers are initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the buffers are initialized, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="52" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a670bdc6009db2fd80a9fbe5178a4dc2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename valueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::mpi::FullDuplexCommBuffer::initComm</definition>
        <argsstring>(std::string commName)</argsstring>
        <name>initComm</name>
        <param>
          <type>std::string</type>
          <declname>commName</declname>
        </param>
        <briefdescription>
<para>Initialize the communication buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>valueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data to be stored in the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commName</parametername>
</parameternamelist>
<parameterdescription>
<para>A name for the communication, typically a file and line number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="60" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1ade2f20093bb137e0422a43a968e57811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename valueType</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; valueType &gt;</type>
        <definition>std::span&lt;valueType&gt; NeoFOAM::mpi::FullDuplexCommBuffer::getSend</definition>
        <argsstring>(const size_t rank)</argsstring>
        <name>getSend</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
<para>Gets a span of data for the send buffer for a specific rank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>valueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank of the send buffer to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A span of data for the send buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="73" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a5dac50ff38d261c667f48af6f0a4e55d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename valueType</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; const valueType &gt;</type>
        <definition>std::span&lt;const valueType&gt; NeoFOAM::mpi::FullDuplexCommBuffer::getSend</definition>
        <argsstring>(const size_t rank) const</argsstring>
        <name>getSend</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
<para>Gets a span of data for the send buffer for a specific rank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>valueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank of the send buffer to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A span of data for the send buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="85" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a398efacd68a113396e428991b49a96ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename valueType</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; valueType &gt;</type>
        <definition>std::span&lt;valueType&gt; NeoFOAM::mpi::FullDuplexCommBuffer::getReceive</definition>
        <argsstring>(const size_t rank)</argsstring>
        <name>getReceive</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
<para>Gets a span of data for the receive buffer for a specific rank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>valueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank of the receive buffer to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A span of data for the receive buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="97" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aeef462f5ce333ed0fa57d14613056e47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename valueType</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; const valueType &gt;</type>
        <definition>std::span&lt;const valueType&gt; NeoFOAM::mpi::FullDuplexCommBuffer::getReceive</definition>
        <argsstring>(const size_t rank) const</argsstring>
        <name>getReceive</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
<para>Gets a span of data for the receive buffer for a specific rank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>valueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank of the receive buffer to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A span of data for the receive buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="109" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1ac1cd4b95dc80536b64266fbe16e6e6b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::mpi::FullDuplexCommBuffer::startComm</definition>
        <argsstring>()</argsstring>
        <name>startComm</name>
        <briefdescription>
<para>Start non-blocking communication by sending and receiving data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="117" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1abc3cbe1aa10bea2d33f31d0a6c1b8034" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::mpi::FullDuplexCommBuffer::isComplete</definition>
        <argsstring>()</argsstring>
        <name>isComplete</name>
        <briefdescription>
<para>Check if the communication is complete. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the communication is complete, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="127" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a2c810eccadb8e016be42296a2ef97d8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::mpi::FullDuplexCommBuffer::waitComplete</definition>
        <argsstring>()</argsstring>
        <name>waitComplete</name>
        <briefdescription>
<para>Blocking wait for the communication to complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="132" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a5ac36813eeeef04072088bf0912336ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::mpi::FullDuplexCommBuffer::finaliseComm</definition>
        <argsstring>()</argsstring>
        <name>finaliseComm</name>
        <briefdescription>
<para>Finalize the communication by cleaning up the buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="141" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="141" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A buffer for full-duplex communication in a distributed system using MPI. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer" kindref="compound">FullDuplexCommBuffer</ref> class facilitates efficient, non-blocking, point-to-point data exchange between MPI ranks, allowing for simultaneous send and receive operations. It manages two <ref refid="classNeoFOAM_1_1mpi_1_1HalfDuplexCommBuffer" kindref="compound">HalfDuplexCommBuffer</ref> instances: one for sending data and one for receiving data. </para>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" line="26" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/mpi/fullDuplexCommBuffer.hpp" bodystart="27" bodyend="151"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a5ac36813eeeef04072088bf0912336ce" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>finaliseComm</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a31210ad9752f89e9f9358ffc727eec0e" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>FullDuplexCommBuffer</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a72b566a0a161548ba7742d740a8062bd" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>FullDuplexCommBuffer</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a398efacd68a113396e428991b49a96ab" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>getReceive</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aeef462f5ce333ed0fa57d14613056e47" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>getReceive</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1ade2f20093bb137e0422a43a968e57811" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>getSend</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a5dac50ff38d261c667f48af6f0a4e55d" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>getSend</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a670bdc6009db2fd80a9fbe5178a4dc2e" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>initComm</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a180b6f7fbc497d5bc8b150d83a927719" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>isCommInit</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1abc3cbe1aa10bea2d33f31d0a6c1b8034" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>isComplete</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aecc8fb4922dde9a2e35fa0c75545975e" prot="private" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>receive_</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1aa04a0b3012bbcda5ea58ee9118ad28c6" prot="private" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>send_</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1ac1cd4b95dc80536b64266fbe16e6e6b4" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>startComm</name></member>
      <member refid="classNeoFOAM_1_1mpi_1_1FullDuplexCommBuffer_1a2c810eccadb8e016be42296a2ef97d8c" prot="public" virt="non-virtual"><scope>NeoFOAM::mpi::FullDuplexCommBuffer</scope><name>waitComplete</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
