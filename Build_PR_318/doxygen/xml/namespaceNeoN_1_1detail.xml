<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoN_1_1detail" kind="namespace" language="C++">
    <compoundname>NeoN::detail</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoN_1_1detail_1ac9fe2d7185e9fe7c36c8ea5f91886286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoN::detail::deepCopyVisitor</definition>
        <argsstring>(localIdx ssize, const ValueType *srcPtr, ValueType *dstPtr)</argsstring>
        <name>deepCopyVisitor</name>
        <qualifiedname>NeoN::detail::deepCopyVisitor</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>ssize</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>srcPtr</declname>
        </param>
        <param>
          <type>ValueType *</type>
          <declname>dstPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" line="26" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" bodystart="26" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1detail_1a42d5c869b26c6f44557a08ec765a08af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename BinaryOp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::detail::fieldBinaryOp</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const Vector&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b, BinaryOp op)</argsstring>
        <name>fieldBinaryOp</name>
        <qualifiedname>NeoN::detail::fieldBinaryOp</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BinaryOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="105" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="105" bodyend="115"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" line="22" column="1"/>
  </compounddef>
</doxygen>
